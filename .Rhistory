# -- Bayesian Logistic Regression
# note: when moving to rmarkdown, make sure to specify/compile model in separate chunks!
library(coda)
library(rjags)
library(R2jags)
# --  Specify the model
cat(
"model {
for(i in 1:N){
CAT[i] ~ dbern(p[i])     # Bernoulli-distributed response
logit(p[i]) <- b0 + a[Family[i]] + b1*Gamma[i] + b2*HZE[i] # likelihood function
}
for(j in 1:nFam){
a[j] ~ dnorm(0, tau)
}
b0 ~ dnorm(0.0, 1.0E-6)   # vaguely informative priors
b1 ~ dnorm(0.0, 1.0E-6)
b2 ~ dnorm(0.0, 1.0E-6)
tau ~ dgamma(1.0E-3,1.0E-3)    # convert precision to variance 1/sigma^2
sigma  <- 1.0/sqrt(tau)
}", file = "cat.jag"
)
# -- Setup
# break Treatment into dummy variables for each group
treatment <- model.matrix(~ Treatment - 1, cats)
colnames(treatment) <- c("Unirradiated", "Gamma", "HZE")
cats <- data.frame(cats, treatment)
# format relevant data as a list
data <- list(Gamma = cats$Gamma, HZE = cats$HZE,
Family = cats$Family, nFam = length(unique(cats$Family)), N = nrow(cats))
# setup for the algorithm
nIter <- 10000
nChains <- 3
nThin <- 1
BurnIn <- 1000
# pull starting values from frequentist model
ests <- summary(mod0)$coef[,1]
var <- as.numeric(as.data.frame(VarCorr(mod0))$vcov)
inits <- list(list(tau = ((1/var)+.1), b0 = ests[1]+0.5, b1 = ests[2]+0.1, b2 = ests[3]+0.1),
list(tau = ((1/var)-.1), b0 = ests[1]-0.5, b1 = ests[2]-0.1, b2 = ests[3]-0.1),
list(tau = (1/var), b0 = ests[1], b1 = ests[2], b2 = ests[3]))
# -- Compile and run the model
params <- c("b0", "b1", "b2", "sigma")
mod.jags <- jags(data = data, inits = inits,
parameters.to.save = params,
model.file = "cat.jag",
n.chains = nChains,
n.iter = nIter,
n.burnin = BurnIn,
n.thin = nThin)
ests[3]
# --  Specify the model
cat(
"model {
for(i in 1:N){
CAT[i] ~ dbern(p[i])     # Bernoulli-distributed response
logit(p[i]) <- b0 + a[Family[i]] + b1*Gamma[i] + b2*HZE[i] # likelihood function
}
for(j in 1:nFam){
a[j] ~ dnorm(0, tau)
}
b0 ~ dnorm(0.0, 1.0E-6)   # vaguely informative priors
b1 ~ dnorm(0.0, 1.0E-6)
b2 ~ dnorm(0.0, 1.0E-6)
tau ~ dgamma(1.0E-3,1.0E-3)    # convert precision to variance 1/sigma^2
sigma  <- 1.0/tau
}", file = "cat.jag"
)
mod.jags <- jags(data = data, inits = inits,
parameters.to.save = params,
model.file = "cat.jag",
n.chains = nChains,
n.iter = nIter,
n.burnin = BurnIn,
n.thin = nThin)
cat.jag
# --  Specify the model
cat(
"model {
for(i in 1:N){
CAT[i] ~ dbern(p[i])     # Bernoulli-distributed response
logit(p[i]) <- b0 + a[Family[i]] + b1*Gamma[i] + b2*HZE[i] # likelihood function
}
for(j in 1:nFam){
a[j] ~ dnorm(0, tau)
}
b0 ~ dnorm(0.0, 1.0E-6)   # vaguely informative priors
b1 ~ dnorm(0.0, 1.0E-6)
b2 ~ dnorm(0.0, 1.0E-6)
tau ~ dgamma(1.0E-3,1.0E-3)    # convert precision to variance 1/sigma^2
sigma  <- 1.0/tau
}", file = "cat.jag"
)
mod.jags <- jags(data = data, inits = inits,
parameters.to.save = params,
model.file = "cat.jag",
n.chains = nChains,
n.iter = nIter,
n.burnin = BurnIn,
n.thin = nThin)
data$Family
VarCorr(mod0)
as.data.frame(VarCorr(mod0)
as.data.frame(VarCorr(mod0))
as.data.frame(VarCorr(mod0))
sig <- as.numeric(as.data.frame(VarCorr(mod0))$sdcor)
sqrt(sig)
sqrt(var)
sig^2
# --  Specify the model
cat(
"model {
for(i in 1:N){
CAT[i] ~ dbern(p[i])     # Bernoulli-distributed response
logit(p[i]) <- b0 + a[Family[i]] + b1*Gamma[i] + b2*HZE[i] # likelihood function
}
for(j in 1:nFam){
a[j] ~ dnorm(0, tau)
}
b0 ~ dnorm(0.0, 1.0E-6)   # vaguely informative priors
b1 ~ dnorm(0.0, 1.0E-6)
b2 ~ dnorm(0.0, 1.0E-6)
sigma ~ dgamma(1.0E-3,1.0E-3)    # convert precision to variance 1/sigma^2
tau  <- 1.0/(sigma^2)
}", file = "cat.jag"
)
set.seed(556)
mod.jags <- jags(data = data, inits = inits,
parameters.to.save = params,
model.file = "cat.jag",
n.chains = nChains,
n.iter = nIter,
n.burnin = BurnIn,
n.thin = nThin)
# --  Specify the model
cat(
"model {
for(i in 1:N){
CAT[i] ~ dbern(p[i])     # Bernoulli-distributed response
logit(p[i]) <- b0 + a[Family[i]] + b1*Gamma[i] + b2*HZE[i] # likelihood function
}
for(j in 1:nFam){
a[j] ~ dnorm(0, tau)
}
b0 ~ dnorm(0.0, 1.0E-6)   # vaguely informative priors
b1 ~ dnorm(0.0, 1.0E-6)
b2 ~ dnorm(0.0, 1.0E-6)
tau ~ dgamma(1.0E-3,1.0E-3)    # convert precision to variance 1/sigma^2
sigma  <- 1.0/tau
}", file = "cat.jag"
)
# --  Specify the model
cat(
"model{
for(i in 1:N){
CAT[i] ~ dbern(p[i])     # Bernoulli-distributed response
logit(p[i]) <- b0 + a[Family[i]] + b1*Gamma[i] + b2*HZE[i] # likelihood function
}
for(j in 1:nFam){
a[j] ~ dnorm(0, tau)
}
b0 ~ dnorm(0.0, 1.0E-6)   # vaguely informative priors
b1 ~ dnorm(0.0, 1.0E-6)
b2 ~ dnorm(0.0, 1.0E-6)
tau ~ dgamma(1.0E-3,1.0E-3)    # convert precision to variance 1/sigma^2
sigma  <- 1.0/tau
}", file = "cat.jag"
)
mod.jags <- jags(data = data, inits = inits,
parameters.to.save = params,
model.file = "cat.jag",
n.chains = nChains,
n.iter = nIter,
n.burnin = BurnIn,
n.thin = nThin)
inits <- list(list(tau = 1, b0 = ests[1]+0.5, b1 = ests[2]+0.1, b2 = ests[3]+0.1),
list(tau = 1, b0 = ests[1]-0.5, b1 = ests[2]-0.1, b2 = ests[3]-0.1),
list(tau = 1, b0 = ests[1], b1 = ests[2], b2 = ests[3]))
mod.jags <- jags(data = data, inits = inits,
parameters.to.save = params,
model.file = "cat.jag",
n.chains = nChains,
n.iter = nIter,
n.burnin = BurnIn,
n.thin = nThin)
# --  Specify the model
cat(
"model{
for(i in 1:N){
CAT[i] ~ dbern(p[i])     # Bernoulli-distributed response
logit(p[i]) <- b0 + a[Family[i]] + b1*Gamma[i] + b2*HZE[i] # likelihood function
}
for(j in 1:nFam){
a[j] ~ dnorm(0, tau)
}
b0 ~ dnorm(0.0, 1.0E-6)   # vaguely informative priors
b1 ~ dnorm(0.0, 1.0E-6)
b2 ~ dnorm(0.0, 1.0E-6)
tau <- pow(sigma, -2)    # convert precision to variance 1/sigma^2
sigma ~ dgamma(1.0E-3,1.0E-3)
}", file = "cat.jag"
)
sig <- as.numeric(as.data.frame(VarCorr(mod0))$sdcor)
sig
inits <- list(list(tau = sig+0.1, b0 = ests[1]+0.5, b1 = ests[2]+0.1, b2 = ests[3]+0.1),
list(tau = sig-0.1, b0 = ests[1]-0.5, b1 = ests[2]-0.1, b2 = ests[3]-0.1),
list(tau = sig, b0 = ests[1], b1 = ests[2], b2 = ests[3]))
View(inits)
# -- Compile and run the model
params <- c("b0", "b1", "b2", "sigma")
set.seed(556)
mod.jags <- jags(data = data, inits = inits,
parameters.to.save = params,
model.file = "cat.jag",
n.chains = nChains,
n.iter = nIter,
n.burnin = BurnIn,
n.thin = nThin)
inits <- list(list(sigma = sig+0.1, b0 = ests[1]+0.5, b1 = ests[2]+0.1, b2 = ests[3]+0.1),
list(sigma = sig-0.1, b0 = ests[1]-0.5, b1 = ests[2]-0.1, b2 = ests[3]-0.1),
list(sigma = sig, b0 = ests[1], b1 = ests[2], b2 = ests[3]))
# -- Compile and run the model
params <- c("b0", "b1", "b2", "sigma")
set.seed(556)
mod.jags <- jags(data = data, inits = inits,
parameters.to.save = params,
model.file = "cat.jag",
n.chains = nChains,
n.iter = nIter,
n.burnin = BurnIn,
n.thin = nThin)
# -- Bayesian Logistic Regression
# note: when moving to rmarkdown, make sure to specify/compile model in separate chunks!
library(coda)
library(rjags)
library(R2jags)
# --  Specify the model
cat(
"model{
for(i in 1:N){
CAT[i] ~ dbern(p[i])     # Bernoulli-distributed response
logit(p[i]) <- b0 + a[Family[i]] + b1*Gamma[i] + b2*HZE[i] # likelihood function
}
for(j in 1:nFam){
a[j] ~ dnorm(0, tau)
}
b0 ~ dnorm(0.0, 1.0E-4)   # vaguely informative priors
b1 ~ dnorm(0.0, 1.0E-4)
b2 ~ dnorm(0.0, 1.0E-4)
tau <- pow(sigma, -2)    # convert precision to variance 1/sigma^2
sigma ~ dgamma(1.0E-3,1.0E-3)
}", file = "cat.jag"
)
# -- Setup
# break Treatment into dummy variables for each group
treatment <- model.matrix(~ Treatment - 1, cats)
colnames(treatment) <- c("Unirradiated", "Gamma", "HZE")
cats <- data.frame(cats, treatment)
# format relevant data as a list
data <- list(Gamma = cats$Gamma, HZE = cats$HZE,
Family = cats$Family, nFam = length(unique(cats$Family)), N = nrow(cats))
# setup for the algorithm
nIter <- 10000
nChains <- 3
nThin <- 1
BurnIn <- 1000
# pull starting values from frequentist model
ests <- summary(mod0)$coef[,1]
sig <- as.numeric(as.data.frame(VarCorr(mod0))$sdcor)
inits <- list(list(sigma = sig+0.1, b0 = ests[1]+0.5, b1 = ests[2]+0.1, b2 = ests[3]+0.1),
list(sigma = sig-0.1, b0 = ests[1]-0.5, b1 = ests[2]-0.1, b2 = ests[3]-0.1),
list(sigma = sig, b0 = ests[1], b1 = ests[2], b2 = ests[3]))
# -- Compile and run the model
params <- c("b0", "b1", "b2", "sigma")
set.seed(556)
mod.jags <- jags(data = data, inits = inits,
parameters.to.save = params,
model.file = "cat.jag",
n.chains = nChains,
n.iter = nIter,
n.burnin = BurnIn,
n.thin = nThin)
load.module("dic")
mod.jags <- jags(data = data, inits = inits,
parameters.to.save = params,
model.file = "cat.jag",
n.chains = nChains,
n.iter = nIter,
n.burnin = BurnIn,
n.thin = nThin)
# --  Specify the model
model.text = "model{
for(i in 1:N){
CAT[i] ~ dbern(p[i])     # Bernoulli-distributed response
logit(p[i]) <- b0 + a[Family[i]] + b1*Gamma[i] + b2*HZE[i] # likelihood function
}
for(j in 1:nFam){
a[j] ~ dnorm(0, tau)
}
b0 ~ dnorm(0.0, 1.0E-4)   # vaguely informative priors
b1 ~ dnorm(0.0, 1.0E-4)
b2 ~ dnorm(0.0, 1.0E-4)
tau <- pow(sigma, -2)    # convert precision to variance 1/sigma^2
sigma ~ dgamma(1.0E-3,1.0E-3)
}"
model = textConnection(model.text)
params
# --  Specify the model
model.text = "model{
for(i in 1:N){
CAT[i] ~ dbern(p[i])     # Bernoulli-distributed response
logit(p[i]) <- b0 + a[Family[i]] + b1*Gamma[i] + b2*HZE[i] # likelihood function
}
for(j in 1:nFam){
a[j] ~ dnorm(0, tau)
}
b0 ~ dnorm(0.0, 1.0E-4)   # vaguely informative priors
b1 ~ dnorm(0.0, 1.0E-4)
b2 ~ dnorm(0.0, 1.0E-4)
tau <- pow(sigma, -2)    # convert precision to variance 1/sigma^2
sigma ~ dgamma(1.0E-3,1.0E-3)
}"
model = textConnection(model.text)
inits[1]
init[2]
inits[[2]]
# -- Compile and run the model
params <- c("b0", "b1", "b2", "sigma")
set.seed(556)
model.fit <- jags.model(model,
data = data,
inits = inits,
n.chains = nChains,
n.adapt = nAdapt)
model.coda <- coda.samples(model.fit,
params,
n.iter = nIter,
n.thin = nThin)
head(model.coda[[1]])
summary(window(model.coda[[1]]))
model.dic <- dic.samples(model.fit,
n.iter = nIter,
n.burnin = BurnIn)
# --  Specify the model
model.text = "model{
for(i in 1:N){
CAT[i] ~ dbern(p[i])     # Bernoulli-distributed response
logit(p[i]) <- b0 + a[Family[i]] + b1*Gamma[i] + b2*HZE[i] # likelihood function
}
for(j in 1:nFam){
a[j] ~ dnorm(0, tau)
}
b0 ~ dnorm(0.0, 1.0E-4)   # vaguely informative priors
b1 ~ dnorm(0.0, 1.0E-4)
b2 ~ dnorm(0.0, 1.0E-4)
tau <- pow(sigma, -2)    # convert precision to variance 1/sigma^2
sigma ~ dgamma(1.0E-3,1.0E-3)
}"
model = textConnection(model.text)
set.seed(556)
model.fit <- jags.model(model,
data = data,
inits = inits,
n.chains = nChains,
n.adapt = nAdapt)
model.coda <- coda.samples(model.fit,
params,
n.iter = nIter,
n.thin = nThin)
head(model.coda[[1]])
summary(window(model.coda[[1]]))
nFam
data$nFam
1:47
data$Family
# --  Specify the model
model.text = "model{
for(i in 1:N){
CAT[i] ~ dbern(p[i])     # Bernoulli-distributed response
logit(p[i]) <- b0 + a[Family[i]] + b1*Gamma[i] + b2*HZE[i] # likelihood function
}
for(j in 1:nFam){
a[j] ~ dnorm(0, tau)
}
b0 ~ dnorm(0.0, 1.0E-4)   # vaguely informative priors
b1 ~ dnorm(0.0, 1.0E-4)
b2 ~ dnorm(0.0, 1.0E-4)
tau ~ dgamma(1.0E-3,1.0E-3)   # convert precision to variance 1/sigma^2
sigma <- sqrt(pow(tau, -1))
}"
inits <- list(list(tau = sig^2+0.1, b0 = ests[1]+0.5, b1 = ests[2]+0.1, b2 = ests[3]+0.1),
list(tau = sig^2-0.1, b0 = ests[1]-0.5, b1 = ests[2]-0.1, b2 = ests[3]-0.1),
list(tau = sig^2, b0 = ests[1], b1 = ests[2], b2 = ests[3]))
# --  Specify the model
model.text = "model{
for(i in 1:N){
CAT[i] ~ dbern(p[i])     # Bernoulli-distributed response
logit(p[i]) <- b0 + a[Family[i]] + b1*Gamma[i] + b2*HZE[i] # likelihood function
}
for(j in 1:nFam){
a[j] ~ dnorm(0, tau)
}
b0 ~ dnorm(0.0, 1.0E-4)   # vaguely informative priors
b1 ~ dnorm(0.0, 1.0E-4)
b2 ~ dnorm(0.0, 1.0E-4)
tau ~ dgamma(1.0E-3,1.0E-3)   # convert precision to variance 1/sigma^2
sigma <- sqrt(pow(tau, -1))
}"
model = textConnection(model.text)
# -- Compile and run the model
params <- c("b0", "b1", "b2", "tau")
set.seed(556)
model.fit <- jags.model(model,
data = data,
inits = inits,
n.chains = nChains,
n.adapt = nAdapt)
model.coda <- coda.samples(model.fit,
params,
n.iter = nIter,
n.thin = nThin)
head(model.coda[[1]])
summary(window(model.coda[[1]]))
model.dic <- dic.samples(model.fit,
n.iter = nIter,
n.burnin = BurnIn)
# --  Specify the model
model.text = "model{
for(i in 1:N){
CAT[i] ~ dbern(p[i])     # Bernoulli-distributed response
logit(p[i])<-b0 + a[Family[i]] + b1*Gamma[i] + b2*HZE[i] # likelihood function
}
for(j in 1:nFam){
a[j] ~ dnorm(0, tau)
}
b0 ~ dnorm(0.0, 1.0E-4)   # vaguely informative priors
b1 ~ dnorm(0.0, 1.0E-4)
b2 ~ dnorm(0.0, 1.0E-4)
tau ~ dgamma(1.0E-3,1.0E-3)   # convert precision to variance 1/sigma^2
sigma <- sqrt(pow(tau, -1))
}"
as.data.frame(VarCorr(mod0)
as.data.frame(VarCorr(mod0))
as.data.frame(VarCorr(mod0))
inits <- list(list(tau = var+0.1, b0 = ests[1]+0.5, b1 = ests[2]+0.1, b2 = ests[3]+0.1),
list(tau = var-0.1, b0 = ests[1]-0.5, b1 = ests[2]-0.1, b2 = ests[3]-0.1),
list(tau = var, b0 = ests[1], b1 = ests[2], b2 = ests[3]))
var <- as.numeric(as.data.frame(VarCorr(mod0))$vcov)
inits <- list(list(tau = var+0.1, b0 = ests[1]+0.5, b1 = ests[2]+0.1, b2 = ests[3]+0.1),
list(tau = var-0.1, b0 = ests[1]-0.5, b1 = ests[2]-0.1, b2 = ests[3]-0.1),
list(tau = var, b0 = ests[1], b1 = ests[2], b2 = ests[3]))
model.fit <- jags.model(model,
data = data,
inits = inits,
n.chains = nChains,
n.adapt = nAdapt)
model.fit <- jags.model(model,
data = data,
inits = inits,
n.chains = nChains,
n.adapt = nAdapt)
# --  Specify the model
model.text = "model{
for(i in 1:N){
CAT[i] ~ dbern(p[i])     # Bernoulli-distributed response
logit(p[i])<-b0 + a[Family[i]] + b1*Gamma[i] + b2*HZE[i] # likelihood function
}
for(j in 1:nFam){
a[j] ~ dnorm(0, tau)
}
b0 ~ dnorm(0.0, 1.0E-4)   # vaguely informative priors
b1 ~ dnorm(0.0, 1.0E-4)
b2 ~ dnorm(0.0, 1.0E-4)
tau ~ dgamma(1.0E-3,1.0E-3)   # convert precision to variance 1/sigma^2
sigma2 <- 1/tau
}"
model = textConnection(model.text)
set.seed(556)
model.fit <- jags.model(model,
data = data,
inits = inits,
n.chains = nChains,
n.adapt = nAdapt)
model.coda <- coda.samples(model.fit,
params,
n.iter = nIter,
n.thin = nThin)
head(model.coda[[1]])
model.coda[[1]]
summary(window(model.coda[[1]]))
model.dic <- dic.samples(model.fit,
n.iter = nIter,
n.burnin = BurnIn)
traceplot(window(model.coda[[1]], start=BurnIn))
acf(model.coda[[1]][,1])
gelman.diag(model.coda)
gelman.plot(model.coda)
# --  Specify the model
cat("model{
for(i in 1:N){
CAT[i] ~ dbern(p[i])     # Bernoulli-distributed response
logit(p[i])<-b0 + a[Family[i]] + b1*Gamma[i] + b2*HZE[i] # likelihood function
}
for(j in 1:nFam){
a[j] ~ dnorm(0, tau)
}
b0 ~ dnorm(0.0, 1.0E-4)   # vaguely informative priors
b1 ~ dnorm(0.0, 1.0E-4)
b2 ~ dnorm(0.0, 1.0E-4)
tau ~ dgamma(1.0E-3,1.0E-3)   # convert precision to variance 1/sigma^2
sigma2 <- 1/tau
}", file = "cat.jag")
