score_lymph = Lambda(Score, PreTLymphoma, direction = "symmetric"))
catcors <- catcors %>%
rownames_to_column()
catcors <- catcors %>%
rownames_to_column(var = "Cor")
# Categorical Variable Correlations
catcors <- cats %>%
summarise(sex_coat = Lambda(Sex, CoatColor, direction = "symmetric"),
sex_fam = Lambda(Sex, Family, direction = "symmetric"),
sex_BCS = Lambda(Sex, BCS, direction = "symmetric"),
sex_group = Lambda(Sex, Treatment, direction = "symmetric"),
sex_leuk = Lambda(Sex, MyeloidLeukemia, direction = "symmetric"),
sex_hard = Lambda(Sex, HarderianTumor, direction = "symmetric"),
sex_lymph = Lambda(Sex, PreTLymphoma, direction = "symmetric"),
sex_score = Lambda(Sex, Score, direction = "symmetric"),
coat_fam = Lambda(CoatColor, Family, direction = "symmetric"),
coat_BCS = Lambda(CoatColor, BCS, direction = "symmetric"),
coat_group = Lambda(CoatColor, Treatment, direction = "symmetric"),
coat_leuk = Lambda(CoatColor, MyeloidLeukemia, direction = "symmetric"),
coat_hard = Lambda(CoatColor, HarderianTumor, direction = "symmetric"),
coat_lymph = Lambda(CoatColor, PreTLymphoma, direction = "symmetric"),
coat_score = Lambda(CoatColor, Score, direction = "symmetric"),
fam_BCS = Lambda(Family, BCS, direction = "symmetric"),
fam_group = Lambda(Family, Treatment, direction = "symmetric"),
fam_leuk = Lambda(Family, MyeloidLeukemia, direction = "symmetric"),
fam_hard = Lambda(Family, HarderianTumor, direction = "symmetric"),
fam_lymph = Lambda(Family, PreTLymphoma, direction = "symmetric"),
fam_score = Lambda(Family, Score, direction = "symmetric"),
group_leuk = Lambda(Treatment, MyeloidLeukemia, direction = "symmetric"),
group_hard = Lambda(Treatment, HarderianTumor, direction = "symmetric"),
group_lymph = Lambda(Treatment, PreTLymphoma, direction = "symmetric"),
group_score = Lambda(Treatment, Score, direction = "symmetric"),
score_leuk = Lambda(Score, MyeloidLeukemia, direction = "symmetric"),
score_hard = Lambda(Score, HarderianTumor, direction = "symmetric"),
score_lymph = Lambda(Score, PreTLymphoma, direction = "symmetric"))
catcors <- catcors %>%
rownames_to_column(var = "Cor") %>%
pivot_longer(cols = -Cor, names_to = "Cor")
catcors <- t(catcors)
catcors <- as.data.frame(t(catcors))
# Categorical Variable Correlations
catcors <- cats %>%
summarise(sex_coat = Lambda(Sex, CoatColor, direction = "symmetric"),
sex_fam = Lambda(Sex, Family, direction = "symmetric"),
sex_BCS = Lambda(Sex, BCS, direction = "symmetric"),
sex_group = Lambda(Sex, Treatment, direction = "symmetric"),
sex_leuk = Lambda(Sex, MyeloidLeukemia, direction = "symmetric"),
sex_hard = Lambda(Sex, HarderianTumor, direction = "symmetric"),
sex_lymph = Lambda(Sex, PreTLymphoma, direction = "symmetric"),
sex_score = Lambda(Sex, Score, direction = "symmetric"),
coat_fam = Lambda(CoatColor, Family, direction = "symmetric"),
coat_BCS = Lambda(CoatColor, BCS, direction = "symmetric"),
coat_group = Lambda(CoatColor, Treatment, direction = "symmetric"),
coat_leuk = Lambda(CoatColor, MyeloidLeukemia, direction = "symmetric"),
coat_hard = Lambda(CoatColor, HarderianTumor, direction = "symmetric"),
coat_lymph = Lambda(CoatColor, PreTLymphoma, direction = "symmetric"),
coat_score = Lambda(CoatColor, Score, direction = "symmetric"),
fam_BCS = Lambda(Family, BCS, direction = "symmetric"),
fam_group = Lambda(Family, Treatment, direction = "symmetric"),
fam_leuk = Lambda(Family, MyeloidLeukemia, direction = "symmetric"),
fam_hard = Lambda(Family, HarderianTumor, direction = "symmetric"),
fam_lymph = Lambda(Family, PreTLymphoma, direction = "symmetric"),
fam_score = Lambda(Family, Score, direction = "symmetric"),
group_leuk = Lambda(Treatment, MyeloidLeukemia, direction = "symmetric"),
group_hard = Lambda(Treatment, HarderianTumor, direction = "symmetric"),
group_lymph = Lambda(Treatment, PreTLymphoma, direction = "symmetric"),
group_score = Lambda(Treatment, Score, direction = "symmetric"),
score_leuk = Lambda(Score, MyeloidLeukemia, direction = "symmetric"),
score_hard = Lambda(Score, HarderianTumor, direction = "symmetric"),
score_lymph = Lambda(Score, PreTLymphoma, direction = "symmetric"))
catcors <- as.data.frame(t(catcors))
catcors
# Categorical Variable Correlations
catcors <- cats %>%
summarise(sex_coat = Lambda(Sex, CoatColor, direction = "symmetric"),
sex_fam = Lambda(Sex, Family, direction = "symmetric"),
sex_BCS = Lambda(Sex, BCS, direction = "symmetric"),
sex_group = Lambda(Sex, Treatment, direction = "symmetric"),
sex_leuk = Lambda(Sex, MyeloidLeukemia, direction = "symmetric"),
sex_hard = Lambda(Sex, HarderianTumor, direction = "symmetric"),
sex_lymph = Lambda(Sex, PreTLymphoma, direction = "symmetric"),
sex_score = Lambda(Sex, Score, direction = "symmetric"),
coat_fam = Lambda(CoatColor, Family, direction = "symmetric"),
coat_BCS = Lambda(CoatColor, BCS, direction = "symmetric"),
coat_group = Lambda(CoatColor, Treatment, direction = "symmetric"),
coat_leuk = Lambda(CoatColor, MyeloidLeukemia, direction = "symmetric"),
coat_hard = Lambda(CoatColor, HarderianTumor, direction = "symmetric"),
coat_lymph = Lambda(CoatColor, PreTLymphoma, direction = "symmetric"),
coat_score = Lambda(CoatColor, Score, direction = "symmetric"),
fam_BCS = Lambda(Family, BCS, direction = "symmetric"),
fam_group = Lambda(Family, Treatment, direction = "symmetric"),
fam_leuk = Lambda(Family, MyeloidLeukemia, direction = "symmetric"),
fam_hard = Lambda(Family, HarderianTumor, direction = "symmetric"),
fam_lymph = Lambda(Family, PreTLymphoma, direction = "symmetric"),
fam_score = Lambda(Family, Score, direction = "symmetric"),
group_leuk = Lambda(Treatment, MyeloidLeukemia, direction = "symmetric"),
group_hard = Lambda(Treatment, HarderianTumor, direction = "symmetric"),
group_lymph = Lambda(Treatment, PreTLymphoma, direction = "symmetric"),
group_score = Lambda(Treatment, Score, direction = "symmetric"),
score_leuk = Lambda(Score, MyeloidLeukemia, direction = "symmetric"),
score_hard = Lambda(Score, HarderianTumor, direction = "symmetric"),
score_lymph = Lambda(Score, PreTLymphoma, direction = "symmetric"))
catcors <- as.data.frame(t(round(catcors, digits = 3)))
catcors
colnames(catcors) <- "Cor"
catcors
# Numeric Variable Correlations
cor(cats$Weight, cats$Age)
cor(cats$Weight, cats$BCS)
cor(cats$Age, cats$Cataracts)
# Categorical v. Numeric Variable Correlations
summary(aov(Weight ~ Sex, data = cats))
kruskal.test(Weight ~ Sex, data = cats)
summary(aov(Weight ~ CoatColor, data = cats))
kruskal.test(Weight ~ CoatColor, data = cats)
kruskal.test(Weight ~ Family, data = cats)
summary(aov(Weight ~ Family, data = cats))
kruskal.test(Weight ~ Treatment, data = cats)
summary(aov(Weight ~ Treatment, data = cats))
kruskal.test(Weight ~ PreTLymphoma, data = cats)
summary(aov(Weight ~ CoatColor, data = cats))
# Weight
# adjust p-values by total number of comparisons
summary(aov(Weight ~ Sex, data = cats))
kruskal.test(Weight ~ Sex, data = cats)
summary(aov(Weight ~ CoatColor, data = cats))
kruskal.test(Weight ~ CoatColor, data = cats)
summary(aov(Weight ~ Family, data = cats))
kruskal.test(Weight ~ Family, data = cats)
summary(aov(Weight ~ BCS, data = cats))
kruskal.test(Weight ~ BCS, data = cats)
.05/8
# Age
summary(aov(Age ~ Sex, data = cats))
kruskal.test(Age ~ Sex, data = cats)
summary(aov(Age ~ CoatColor, data = cats))
kruskal.test(Age ~ CoatColor, data = cats)
summary(aov(Age ~ Family, data = cats))
kruskal.test(Age ~ Family, data = cats)
summary(aov(Age ~ BCS, data = cats))
kruskal.test(Age ~ BCS, data = cats)
summary(aov(Age ~ Treatment, data = cats))
kruskal.test(Age ~ Treatment, data = cats)
summary(aov(Age ~ MyeloidLeukemia, data = cats))
kruskal.test(Age ~ MyeloidLeukemia, data = cats)
summary(aov(Age ~ HarderianTumor, data = cats))
kruskal.test(Age ~ HarderianTumor, data = cats)
summary(aov(Age ~ PreTLymphoma, data = cats))
kruskal.test(Age ~ PreTLymphoma, data = cats)
install.packages("sjPlot")
library(sjPlot)
library(broom.mixed)
library(influence.ME)
#-- Load libraries
library(readxl)
library(tidyverse)
library(kableExtra)
library(DescTools)
library(ggsci)
library(lme4)
install.packages("sjmisc")
install.packages("sjmisc")
install.packages("effects")
install.packages("cowplot")
# remove spaces from column and value names
names(cats) <- str_replace_all(names(cats), " ", "_")
# -- Read in the data
cats <- read_excel("GRSD.cataract.xlsx", sheet = "Sheet1")
# remove spaces from column and value names
names(cats) <- str_replace_all(names(cats), " ", "_")
cats <- cats %>%
mutate(CoatColor = str_replace_all(coat_color, " ", "_"))
str(cats)
# turn categorical vars into factor
cats <- cats %>%
rename(Age = `age_(days)`,
Weight = weight,
Animal = animal) %>%
mutate(Sex = as.factor(sex),
CoatColor = as.factor(CoatColor),
Family = as.factor(family), # should this stay a factor? Yes?
BCS = as.ordered(BCS),
Treatment = relevel(as.factor(groups), ref = "Unirradiated"),
MyeloidLeukemia = as.factor(Myeloid_Leukemia),
HarderianTumor = as.factor(Harderian_Tumor),
PreTLymphoma = as.factor(PreT_Lymphoma),
Score = as.ordered(Cataract_Score)) # ordinal cat; leave as numeric?
# select vars, add binary conversion for score
cats <- cats %>%
select(c(Animal, Sex, Weight, CoatColor, Family, BCS, Age, Treatment,
MyeloidLeukemia, HarderianTumor, PreTLymphoma, Score)) %>%
mutate(Cataracts = ifelse(Score < 2, 0, 1))
str(cats)
# individual
length(unique(cats$Animal))
# sex
cats %>% count(Sex)
# weight
summary(cats$Weight)
hist(cats$Weight, br = 20)
# coat color - probably irrelevant?
cats %>% count(CoatColor)
cats %>% group_by(CoatColor) %>% count(Sex)
cats %>% group_by(Family) %>% count(CoatColor)
# family !random effect of interest!
length(unique(cats$Family))
fam_counts <- cats %>% group_by(Family) %>% count()
summary(fam_counts$n)
hist(fam_counts$n, br = 15) # large variation in family size
# BCS - body condition score
cats %>% count(BCS)
# age
range(cats$Age)
hist(cats$Age, br = 20)
# group / groups
cats %>% count(Treatment)
# -- look for relationships between treatment group and other vars
# group and age
cats %>% group_by(Treatment) %>% summarise(mean_age = mean(Age),
median_age = median(Age),
sd_age = sd(Age))
ggplot(cats, aes(x = Age)) +
geom_histogram() +
facet_grid(vars(Treatment))
ggplot(cats, aes(x = Age)) +
geom_histogram(bins = 50) +
facet_grid(vars(Treatment))
ggplot(cats, aes(x = Age)) +
geom_histogram(binwidth = 50) +
facet_grid(vars(Treatment))
ggplot(cats, aes(x = Age)) +
geom_histogram(binwidth = 10) +
facet_grid(vars(Treatment))
ggplot(cats, aes(x = Age)) +
geom_histogram(binwidth = 10) +
facet_grid(vars(Treatment))
# group / groups
cats %>% count(Treatment)
# -- look for relationships between treatment group and other vars
# group and age
cats %>% group_by(Treatment) %>% summarise(mean_age = mean(Age),
median_age = median(Age),
sd_age = sd(Age))
# cancer covariates
cats %>% count(MyeloidLeukemia)
cats %>% count(HarderianTumor)
cats %>% count(PreTLymphoma)
#-- Review Response
cats %>% count(Score)
cats %>% group_by(Sex) %>% count(Score)
cats %>% group_by(Family) %>% summarise(mean_fam_score = mean(as.numeric(Score)))
cats %>% group_by(Treatment) %>% summarise(mean_grp_score = mean(as.numeric(Score)))
cats %>% group_by(Score) %>% count(MyeloidLeukemia)
cats %>% group_by(Score) %>% count(HarderianTumor)
cats %>% group_by(Score) %>% count(PreTLymphoma)
#-- Exploratory Plots - add group sample sizes to these plots
# Score by age
ggplot(cats, aes(x = Score, y = Age)) + geom_boxplot()
#-- Exploratory Plots - add group sample sizes to these plots
# Score by age
ggplot(cats, aes(x = Score, y = Age, fill = Score)) + geom_boxplot()
# Score by age and sex
# Point plot with jitter
ggplot(cats, aes(x = Score, y = Age, color = Sex)) + geom_jitter(width = 0.2)
# Faceted boxplots
ggplot(cats, aes(x = Score, y = Age, fill = Sex)) + geom_boxplot() + facet_wrap(vars(Sex))
ggplot(cats, aes(x = Sex, y = Age, fill = Score)) + geom_boxplot() + facet_wrap(vars(Score))
# Score by treatment group
# distribution looks similar across groups
ggplot(cats, aes(x = as.numeric(Score))) + geom_histogram(bins = 4) + facet_grid(vars(Treatment))
# Score by age and treatment group
ggplot(cats, aes(x = Score, y = Age, color = Treatment)) + geom_jitter(width = 0.2)
ggplot(cats, aes(x = Score, y = Age, fill = Treatment)) + geom_boxplot() + facet_wrap(vars(Treatment))
ggplot(cats, aes(x = Treatment, y = Age, fill = Score)) + geom_boxplot() + facet_wrap(vars(Score))
# score by group, family - too long
fam_scores <- cats %>% group_by(Family, Treatment) %>%
summarise(mean_score = mean(as.numeric(Score))) %>%
pivot_wider(names_from = Treatment, values_from = mean_score) %>%
kbl(caption = "Mean Cataract Score by Group within Family", digits = 2) %>%
kable_classic(full_width = F, html_font = "Cambria")
fam_scores
# counts of score by group
grs_ct <- cats %>% group_by(Score) %>%
count(Treatment) %>%
pivot_wider(names_from = Score, values_from = n) %>%
group_by(Treatment) %>%
mutate(Total = sum(c(`1`, `2`, `3`, `4`))) %>%
kbl(caption = "Counts of Score by Treatment") %>%
add_header_above(c( " " = 1, "Cataract Score" = 4, " " = 1)) %>%
kable_classic(full_width = F, html_font = "Cambria", font_size = 14)
grs_ct
# plot of score by group faceted by family
ggplot(cats, aes(x = Treatment, y = Score, color = Treatment)) + geom_jitter(width = 0.2) +
facet_wrap(vars(Family)) +
scale_color_startrek() +
scale_x_discrete(labels = c("Gam", "HZE", "none")) +
theme_light() +
theme(axis.text.x = element_text(angle = 45)) +
labs(x = "Treatment Group", y = "Cataract Score", color = "Group",
title = "Cataract Score by Treatment, faceted by Family")
# Numeric Variable Correlations
cor(cats$Weight, cats$Age)
# Categorical Variable Correlations
catcors <- cats %>%
summarise(sex_coat = Lambda(Sex, CoatColor, direction = "symmetric"),
sex_fam = Lambda(Sex, Family, direction = "symmetric"),
sex_BCS = Lambda(Sex, BCS, direction = "symmetric"),
sex_group = Lambda(Sex, Treatment, direction = "symmetric"),
sex_leuk = Lambda(Sex, MyeloidLeukemia, direction = "symmetric"),
sex_hard = Lambda(Sex, HarderianTumor, direction = "symmetric"),
sex_lymph = Lambda(Sex, PreTLymphoma, direction = "symmetric"),
sex_score = Lambda(Sex, Score, direction = "symmetric"),
coat_fam = Lambda(CoatColor, Family, direction = "symmetric"),
coat_BCS = Lambda(CoatColor, BCS, direction = "symmetric"),
coat_group = Lambda(CoatColor, Treatment, direction = "symmetric"),
coat_leuk = Lambda(CoatColor, MyeloidLeukemia, direction = "symmetric"),
coat_hard = Lambda(CoatColor, HarderianTumor, direction = "symmetric"),
coat_lymph = Lambda(CoatColor, PreTLymphoma, direction = "symmetric"),
coat_score = Lambda(CoatColor, Score, direction = "symmetric"),
fam_BCS = Lambda(Family, BCS, direction = "symmetric"),
fam_group = Lambda(Family, Treatment, direction = "symmetric"),
fam_leuk = Lambda(Family, MyeloidLeukemia, direction = "symmetric"),
fam_hard = Lambda(Family, HarderianTumor, direction = "symmetric"),
fam_lymph = Lambda(Family, PreTLymphoma, direction = "symmetric"),
fam_score = Lambda(Family, Score, direction = "symmetric"),
group_leuk = Lambda(Treatment, MyeloidLeukemia, direction = "symmetric"),
group_hard = Lambda(Treatment, HarderianTumor, direction = "symmetric"),
group_lymph = Lambda(Treatment, PreTLymphoma, direction = "symmetric"),
group_score = Lambda(Treatment, Score, direction = "symmetric"),
score_leuk = Lambda(Score, MyeloidLeukemia, direction = "symmetric"),
score_hard = Lambda(Score, HarderianTumor, direction = "symmetric"),
score_lymph = Lambda(Score, PreTLymphoma, direction = "symmetric"))
catcors <- as.data.frame(t(round(catcors, digits = 3)))
colnames(catcors) <- "Cor"
catcors
# Weight
summary(aov(Weight ~ Sex, data = cats))
kruskal.test(Weight ~ Sex, data = cats)
summary(aov(Weight ~ CoatColor, data = cats))
kruskal.test(Weight ~ CoatColor, data = cats)
summary(aov(Weight ~ Family, data = cats))
kruskal.test(Weight ~ Family, data = cats)
summary(aov(Weight ~ BCS, data = cats))
kruskal.test(Weight ~ BCS, data = cats)
summary(aov(Weight ~ Treatment, data = cats))
kruskal.test(Weight ~ Treatment, data = cats)
summary(aov(Weight ~ MyeloidLeukemia, data = cats))
kruskal.test(Weight ~ MyeloidLeukemia, data = cats)
summary(aov(Weight ~ HarderianTumor, data = cats))
kruskal.test(Weight ~ HarderianTumor, data = cats)
summary(aov(Weight ~ PreTLymphoma, data = cats))
kruskal.test(Weight ~ PreTLymphoma, data = cats)
# Age
summary(aov(Age ~ Sex, data = cats))
kruskal.test(Age ~ Sex, data = cats)
summary(aov(Age ~ CoatColor, data = cats))
kruskal.test(Age ~ CoatColor, data = cats)
summary(aov(Age ~ Family, data = cats))
kruskal.test(Age ~ Family, data = cats)
summary(aov(Age ~ BCS, data = cats))
kruskal.test(Age ~ BCS, data = cats)
summary(aov(Age ~ Treatment, data = cats))
kruskal.test(Age ~ Treatment, data = cats)
summary(aov(Age ~ MyeloidLeukemia, data = cats))
kruskal.test(Age ~ MyeloidLeukemia, data = cats)
summary(aov(Age ~ HarderianTumor, data = cats))
kruskal.test(Age ~ HarderianTumor, data = cats)
summary(aov(Age ~ PreTLymphoma, data = cats))
kruskal.test(Age ~ PreTLymphoma, data = cats)
# fit initial model, look at model diagnostics
mod0 <- glmer(cataracts ~ groups + (1|fam), data = cats, family = binomial,
control = glmerControl(optimizer = "bobyqa"))
# fit initial model, look at model diagnostics
mod0 <- glmer(Cataracts ~ groups + (1|fam), data = cats, family = binomial,
control = glmerControl(optimizer = "bobyqa"))
# fit initial model, look at model diagnostics
mod0 <- glmer(Cataracts ~ Treatment + (1|Family), data = cats, family = binomial,
control = glmerControl(optimizer = "bobyqa"))
summary(mod0)
plot_model(mod0)
plot_model(mod0, sort.est = TRUE)
plot_model(mod0, type = "re", sort.est = TRUE)
install.packages("glmmTMB")
plot_model(mod0, type = "re", sort.est = TRUE)
plot_model(mod0, sort.est = TRUE)
plot_model(mod0, sort.est = TRUE, show.values = TRUE,
title = "Cataracts Odds Ratios by Treatment Group")
plot_model(mod0, sort.est = TRUE, show.values = TRUE, value.offset = .3,
title = "Cataracts Odds Ratios by Treatment Group")
plot_model(mod0, sort.est = TRUE, show.values = TRUE,
color = "Accent",
title = "Cataracts Odds Ratios by Treatment Group")
plot_model(mod0, sort.est = TRUE, show.values = TRUE,
color = "Dark2",
title = "Cataracts Odds Ratios by Treatment Group")
plot_model(mod0, sort.est = TRUE, show.values = TRUE,
color = "Dark2", vline.color = "purple",
title = "Cataracts Odds Ratios by Treatment Group")
plot_model(mod0, sort.est = TRUE, show.values = TRUE,
color = "Dark2", vline.color = "darkpurple",
title = "Cataracts Odds Ratios by Treatment Group")
plot_model(mod0, sort.est = TRUE, show.values = TRUE,
color = "Dark2", vline.color = "purple4",
title = "Cataracts Odds Ratios by Treatment Group")
plot_model(mod0, sort.est = TRUE, show.values = TRUE,
color = "Dark2", vline.color = "purple3",
title = "Cataracts Odds Ratios by Treatment Group")
plot_model(mod0, sort.est = TRUE, show.values = TRUE,
color = "Dark2", vline.color = "violet3",
title = "Cataracts Odds Ratios by Treatment Group")
kruskal.test(Age ~ MyeloidLeukemia, data = cats)
plot_model(mod0, sort.est = TRUE, show.values = TRUE,
color = "Dark2", vline.color = "darkorchid",
title = "Cataracts Odds Ratios by Treatment Group")
plot_model(mod0, sort.est = TRUE, show.values = TRUE,
color = "Dark2", vline.color = "darkorchid3",
title = "Cataracts Odds Ratios by Treatment Group")
plot_model(mod0, sort.est = TRUE, show.values = TRUE,
color = "Dark2", vline.color = "darkorchid3",
width = 2,
title = "Cataracts Odds Ratios by Treatment Group")
plot_model(mod0, sort.est = TRUE, show.values = TRUE,
color = "Dark2", vline.color = "darkorchid3",
width = 1.1,
title = "Cataracts Odds Ratios by Treatment Group")
plot_model(mod0, sort.est = TRUE, show.values = TRUE,
color = "Dark2", vline.color = "darkorchid3",
width = 0.1,
title = "Cataracts Odds Ratios by Treatment Group")
plot_model(mod0, type = "std")
plot_model(mod0, transform = "plogis")
plot_model(mod0, sort.est = TRUE, show.values = TRUE,
color = "Dark2", vline.color = "darkorchid3",
width = 0.1, show.p = TRUE,
title = "Cataracts Odds Ratios by Treatment Group")
plot_model(mod0, sort.est = TRUE, show.values = TRUE,
color = "Dark2", vline.color = "darkorchid3",
width = 0.1, title = "Cataracts Odds Ratios by Treatment Group")
plot_model(mod0, transform = "plogis")
tab_model(mod0, show.re.var = TRUE,
dv.labels = "Effects of Treatment on Cataracts")
tab_model(mod0, show.re.var = TRUE,
pred.labels = c("Unirradiated Control", "Gamma", "HZE"),
dv.labels = "Effects of Treatment on Cataracts")
tab_model(mod0, show.re.var = TRUE,
pred.labels = c("Unirradiated", "Gamma", "HZE"),
dv.labels = "Effects of Treatment on Cataracts")
# what about a model with a random slope for family?
mod1 <- glmer(Cataracts ~ Treatment + (Treatment|Family),
data = cats, family = binomial,
control = glmerControl(optimizer = "bobyqa"))
summary(mod1)
summary(mod0)
plot_model(mod1, sort.est = TRUE, show.values = TRUE,
color = "Dark2", vline.color = "darkorchid3",
width = 0.1, title = "Model 1: Cataracts Odds Ratios by Treatment Group")
tab_model(mod1, show.re.var = TRUE,
pred.labels = c("Unirradiated", "Gamma", "HZE"),
dv.labels = "Model 1 Effects of Treatment on Cataracts")
# fit initial model, look at model diagnostics
mod0 <- glmer(Cataracts ~ Treatment + (1|Family), data = cats, family = binomial,
control = glmerControl(optimizer = "bobyqa"))
summary(mod0)
summary(mod1)
seq_along(cats$Family)
seq_along(unique(cats$Family))
dat <- cats %>% filter(Family == 1)
mod <- glm(Cataracts ~ Treatment, data = dat, family = binomial)
summary(mod)
unlist(mod)
unlist(summary(mod))
summary(mod)$coefficients
summary(mod$coefficients)[1,1]
summary(mod)$coefficients[1,1]
summary(mod)$coef
e
exp(1)
exp(0)
exp(1)^summary(mod)$coef[1,1]
1/.125
2.71^-2.079
1/.125
unique(cats$Family)
fam <- unique(cats$Family)[1]
fam
# Look at intercepts and slopes for fixed logistic regression models for each family
Int <- Gamma <- HZE <- rep(NA, 47)
for (i in seq_along(unique(cats$Family))){
dat <- cats %>% filter(Family == i)
mod <- glm(Cataracts ~ Treatment, data = dat, family = binomial)
Int[i] <- 1/(exp(1)^summary(mod)$coef[1,1])
Gamma[i] <- 1/(exp(1)^summary(mod)$coef[2,1])
HZE[i] <- 1/(exp(1)^summary(mod)$coef[3,1])
}
coefs[i] <- summary(mod)$coef
# Look at intercepts and slopes for fixed logistic regression models for each family
coefs <- NA
for (i in seq_along(unique(cats$Family))){
dat <- cats %>% filter(Family == i)
mod <- glm(Cataracts ~ Treatment, data = dat, family = binomial)
coefs[i] <- summary(mod)$coef
}
warnings()
# Posterior density plots with HPD intervals
ggplot(posts, aes(x = sigma2)) +
geom_density(color = "cornflowerblue", fill = "cornflowerblue", alpha = 0.5) +
geom_vline(aes(xintercept = bayes_tab[7,5]), color = "darkorchid", linetype = "dashed") +
geom_vline(aes(xintercept = bayes_tab[7,6]), color = "darkorchid", linetype = "dashed") +
geom_vline(aes(xintercept = bayes_tab[7,3]), color = "red") + # calculate mode and replot
scale_x_continuous(limits = c(0, 3), expand = c(0, 0)) +
theme_minimal() +
labs(title = "Posterior Density of Random Family Effect with 95% HPD Interval")
