theme_light() +
labs(x = "Age (days)")
ag
wt
wt <- ggplot(cats, aes(x = Weight, fill = Treatment)) +
geom_histogram(alpha = 0.5) +
theme_light() +
theme(legend.position = "none") +
labs(x = "Weight (grams)")
ag <- ggplot(cats, aes(x = Age, fill = Treatment)) +
geom_histogram(alpha = 0.5) +
theme_light() +
labs(x = "Age (days)")
wt
ag
# -- look for relationships between treatment group and other vars
# group and age
cats %>% group_by(Treatment) %>% summarise(mean_age = mean(Age),
median_age = median(Age),
sd_age = sd(Age))
# cancer covariates
cats %>% count(MyeloidLeukemia)
cats %>% count(HarderianTumor)
cats %>% count(PreTLymphoma)
cats %>% group_by(MyeloidLeukemia, HarderianTumor, PreTLymphoma, Cataracts) %>%
count()
cats %>% group_by(MyeloidLeukemia, HarderianTumor, PreTLymphoma) %>%
count()
# cancer covariates
cats %>% count(MyeloidLeukemia)
cats %>% count(HarderianTumor)
cats %>% count(PreTLymphoma)
# family !random effect of interest!
length(unique(cats$Family))
fam_counts <- cats %>% group_by(Family) %>% count()
summary(fam_counts$n)
hist(fam_counts$n, br = 15) # large variation in family size
fam_counts <- cats %>% group_by(Family) %>% count()
ggplot(fam_counts, aes(x = n, fill = 1)) +
geom_histogram(alpha = 0.5) +
theme_light()
ggplot(fam_counts, aes(x = n, fill = 1)) +
geom_histogram(alpha = 0.5) +
theme_light()
fam_counts <- cats %>% group_by(Family) %>% count()
ggplot(fam_counts, aes(x = n), fill = 1) +
geom_histogram(alpha = 0.5) +
theme_light()
ggplot(fam_counts, aes(x = n), fill = 1) +
geom_histogram(alpha = 0.5) +
theme_light()
fam_counts <- cats %>% group_by(Family) %>% count()
ggplot(fam_counts, aes(x = n)) +
geom_histogram(fill = "#5C88DAFF", alpha = 0.5) +
theme_light() +
labs(x = "Family size")
ggplot(fam_counts, aes(x = n)) +
geom_histogram(fill = "#5C88DAFF", alpha = 0.5) +
theme_light() +
labs(x = "Family size")
ggplot(fam_counts, aes(x = n)) +
geom_histogram(fill = "#5C88DAFF", alpha = 0.5, bins = 20) +
theme_light() +
labs(x = "Family size")
# BCS - body condition score
cats %>% count(BCS)
# age
range(cats$Age)
hist(cats$Age, br = 20)
ggplot(cats, aes(x = Age)) +
geom_histogram(binwidth = 10) +
facet_grid(vars(Treatment))
# group / groups
cats %>% count(Treatment)
# -- look for relationships between treatment group and other vars
# group and age
cats %>% group_by(Treatment) %>% summarise(mean_age = mean(Age),
median_age = median(Age),
sd_age = sd(Age))
# cancer covariates
cats %>% count(MyeloidLeukemia)
cats %>% count(HarderianTumor)
cats %>% count(PreTLymphoma)
cats %>% group_by(MyeloidLeukemia, HarderianTumor, PreTLymphoma) %>%
count()
#-- Review Response
cats %>% count(Score)
cats %>% group_by(Sex) %>% count(Score)
cats %>% group_by(Family) %>% summarise(mean_fam_score = mean(as.numeric(Score)))
#-- Exploratory Plots - add group sample sizes to these plots
# Score by age
ggplot(cats, aes(x = Score, y = Age, fill = Score)) + geom_boxplot()
# Score by age and sex
# Point plot with jitter
ggplot(cats, aes(x = Score, y = Age, color = Sex)) + geom_jitter(width = 0.2)
# Faceted boxplots
ggplot(cats, aes(x = Score, y = Age, fill = Sex)) + geom_boxplot() + facet_wrap(vars(Sex))
# Faceted boxplots
ggplot(cats, aes(x = Cataracts, y = Age, fill = Sex)) + geom_boxplot() + facet_wrap(vars(Sex))
# Faceted boxplots
ggplot(cats, aes(x = as.factor(Cataracts), y = Age, fill = Sex)) + geom_boxplot() + facet_wrap(vars(Sex))
ggplot(cats, aes(x = as.factor(Cataracts), y = Age, fill = Sex)) +
geom_boxplot() + facet_wrap(vars(Sex)) +
theme_light() +
labs(x = "Cataracts Status")
ggplot(cats, aes(x = as.factor(Cataracts), y = Age, fill = Sex)) +
geom_boxplot() + facet_wrap(vars(Sex)) +
theme_light() +
labs(x = "Cataracts Status")
ggplot(cats, aes(x = Sex, y = Age, fill = Score)) + geom_boxplot() + facet_wrap(vars(Score))
ggplot(cats, aes(x = Sex, y = Age, fill = Cataracts)) + geom_boxplot() + facet_wrap(vars(Cataracts))
ggplot(cats, aes(x = Sex, y = Age, fill = as.factor(Cataracts))) + geom_boxplot() + facet_wrap(vars(as.factor(Cataracts)))
# Faceted boxplots
ggplot(cats, aes(x = as.factor(Cataracts), y = Age, fill = Sex)) + geom_boxplot() + facet_wrap(vars(Sex))
ggplot(cats, aes(x = Sex, y = Age, fill = as.factor(Cataracts))) +
geom_boxplot() + facet_wrap(vars(as.factor(Cataracts)))
# Score by treatment group
# distribution looks similar across groups
ggplot(cats, aes(x = as.numeric(Score))) + geom_histogram(bins = 4) + facet_grid(vars(Treatment))
# Score by age and treatment group
ggplot(cats, aes(x = Score, y = Age, color = Treatment)) + geom_jitter(width = 0.2)
ggplot(cats, aes(x = Score, y = Age, fill = Treatment)) + geom_boxplot() + facet_wrap(vars(Treatment))
ggplot(cats, aes(x = Cataracts, y = Age, fill = Treatment)) + geom_boxplot() + facet_wrap(vars(Treatment))
ggplot(cats, aes(x = as.factor(Cataracts), y = Age, fill = as.factor(Cataracts))) + geom_boxplot() + facet_wrap(vars(Treatment))
# Plot of average score of sex-group-family
# treatment on x, score on y, line for each family
# facet or color by sex
grsex_score <- cats %>%
group_by(Sex, Treatment, Family) %>%
summarize(mean_score = mean(Cataracts))
ct_prop
sex_trt <- cats %>%
group_by(Treatment, Sex, Cataracts) %>%
summarise(n = n()) %>%
ungroup() %>%
group_by(Treatment, Sex) %>%
mutate(prop = round(n/sum(n), digits = 2))
sum_tab <- sex_trt %>%
pivot_wider(names_from = Sex, values_from = c(n, prop)) %>%
mutate(Cataracts = ifelse(Cataracts == 0, "No", "Yes"),
Treatment = rep(" ", 1)) %>%
relocate(prop_F, .after = n_F)
n_C <- c(438, 58, 214, 63, 281, 115)
prop_C <- c(0.88, 0.12, 0.77, 0.23, 0.71, 0.29)
sum_tab <- sum_tab %>%
ungroup() %>%
mutate(n_C = n_C, prop_C = prop_C) %>%
add_row(Treatment = " ", Cataracts = "$\\sum$", n_F = 258, prop_F = NA,
n_M = 238, prop_M = NA, n_C = 496, prop_C = NA, .after = 2) %>%
add_row(Treatment = " ", Cataracts = "$\\sum$", n_F = 145, prop_F = NA,
n_M = 132, prop_M = NA, n_C = 277, prop_C = NA, .after = 5) %>%
add_row(Treatment = " ", Cataracts = "$\\sum$", n_F = 205, prop_F = NA,
n_M = 191, prop_M = NA, n_C = 396, prop_C = NA, .after = 8) %>%
add_row(Treatment = " ", Cataracts = "$\\sum$", n_F = 608, prop_F = NA,
n_M = 561, prop_M = NA, n_C = 1169, prop_C = NA, .after = 9)
options(knitr.kable.NA = '')
ct_prop <- kbl(sum_tab, col.names = c("Treatment", "Cataracts", "n", "prop", "n", "prop", "n", "prop")) %>%
kable_styling(latex_options = "hold_position") %>%
kable_classic_2(full_width = F, html_font = "Cambria") %>%
add_header_above(c(" " = 2, "Female" = 2, "Male" = 2, "$\\sum$" = 2)) %>%
pack_rows(index = c("Control" = 3, "Gamma" = 3, "HZE" = 3, "$\\sum$" = 1))
ct_prop
ggplot(grsex_score, aes(x = Treatment, y = mean_score, color = Sex)) +
geom_line(aes(group = interaction(Family, Sex))) +
scale_color_startrek() +
scale_x_discrete(expand = c(0, .1)) +
theme_light() +
labs(y = "mean score",
title = "Catarats by Family, Sex, Treatment Group")
ggplot(grsex_score, aes(x = Treatment, y = mean_score, color = Sex)) +
geom_line(aes(group = Family)) + facet_grid(vars(Sex)) +
scale_color_startrek() +
scale_x_discrete(expand = c(0, .1)) +
theme_light() +
labs(y = "mean score",
title = "Cataracts by Family, Sex, Treatment Group")
logits <- sex_trt %>%
group_by(Treatment, Sex) %>%
summarise(odds_ratio = prop[Cataracts == 1]/prop[Cataracts == 0])
ggplot(logits, aes(x = Sex, y = odds_ratio, fill = Treatment)) +
geom_col(position = "dodge") +
scale_fill_startrek() +
theme_light() +
labs(y = "Odds Ratio",
title = "Empirical Odds Ratios of Cataracts by Sex, Treatment")
# plot of score by group faceted by family
ggplot(cats, aes(x = Treatment, y = Score, color = Treatment)) + geom_jitter(width = 0.2) +
facet_wrap(vars(Family)) +
scale_color_startrek() +
scale_x_discrete(labels = c("Gam", "HZE", "none")) +
theme_light() +
theme(axis.text.x = element_text(angle = 45)) +
labs(x = "Treatment Group", y = "Cataract Score", color = "Group",
title = "Cataract Score by Treatment, faceted by Family")
# Categorical Variable Correlations
catcors <- cats %>%
summarise(sex_coat = Lambda(Sex, CoatColor, direction = "symmetric"),
sex_fam = Lambda(Sex, Family, direction = "symmetric"),
sex_BCS = Lambda(Sex, BCS, direction = "symmetric"),
sex_group = Lambda(Sex, Treatment, direction = "symmetric"),
sex_leuk = Lambda(Sex, MyeloidLeukemia, direction = "symmetric"),
sex_hard = Lambda(Sex, HarderianTumor, direction = "symmetric"),
sex_lymph = Lambda(Sex, PreTLymphoma, direction = "symmetric"),
sex_score = Lambda(Sex, Score, direction = "symmetric"),
coat_fam = Lambda(CoatColor, Family, direction = "symmetric"),
coat_BCS = Lambda(CoatColor, BCS, direction = "symmetric"),
coat_group = Lambda(CoatColor, Treatment, direction = "symmetric"),
coat_leuk = Lambda(CoatColor, MyeloidLeukemia, direction = "symmetric"),
coat_hard = Lambda(CoatColor, HarderianTumor, direction = "symmetric"),
coat_lymph = Lambda(CoatColor, PreTLymphoma, direction = "symmetric"),
coat_score = Lambda(CoatColor, Score, direction = "symmetric"),
fam_BCS = Lambda(Family, BCS, direction = "symmetric"),
fam_group = Lambda(Family, Treatment, direction = "symmetric"),
fam_leuk = Lambda(Family, MyeloidLeukemia, direction = "symmetric"),
fam_hard = Lambda(Family, HarderianTumor, direction = "symmetric"),
fam_lymph = Lambda(Family, PreTLymphoma, direction = "symmetric"),
fam_score = Lambda(Family, Score, direction = "symmetric"),
group_leuk = Lambda(Treatment, MyeloidLeukemia, direction = "symmetric"),
group_hard = Lambda(Treatment, HarderianTumor, direction = "symmetric"),
group_lymph = Lambda(Treatment, PreTLymphoma, direction = "symmetric"),
group_score = Lambda(Treatment, Score, direction = "symmetric"),
score_leuk = Lambda(Score, MyeloidLeukemia, direction = "symmetric"),
score_hard = Lambda(Score, HarderianTumor, direction = "symmetric"),
score_lymph = Lambda(Score, PreTLymphoma, direction = "symmetric"))
catcors <- as.data.frame(t(round(catcors, digits = 3)))
colnames(catcors) <- "Cor"
library(readxl)
library(tidyverse)
library(DescTools)
library(lme4)
library(broom.mixed)
library(kableExtra)
library(xtable)
library(emmeans)
library(ggsci)
library(sjPlot)
library(coda)
library(rjags)
library(R2jags)
library(superdiag)
library(mcmcplots)
library(ggmcmc)
library(gridExtra)
# Categorical Variable Correlations
catcors <- cats %>%
summarise(sex_coat = Lambda(Sex, CoatColor, direction = "symmetric"),
sex_fam = Lambda(Sex, Family, direction = "symmetric"),
sex_BCS = Lambda(Sex, BCS, direction = "symmetric"),
sex_group = Lambda(Sex, Treatment, direction = "symmetric"),
sex_leuk = Lambda(Sex, MyeloidLeukemia, direction = "symmetric"),
sex_hard = Lambda(Sex, HarderianTumor, direction = "symmetric"),
sex_lymph = Lambda(Sex, PreTLymphoma, direction = "symmetric"),
sex_score = Lambda(Sex, Score, direction = "symmetric"),
coat_fam = Lambda(CoatColor, Family, direction = "symmetric"),
coat_BCS = Lambda(CoatColor, BCS, direction = "symmetric"),
coat_group = Lambda(CoatColor, Treatment, direction = "symmetric"),
coat_leuk = Lambda(CoatColor, MyeloidLeukemia, direction = "symmetric"),
coat_hard = Lambda(CoatColor, HarderianTumor, direction = "symmetric"),
coat_lymph = Lambda(CoatColor, PreTLymphoma, direction = "symmetric"),
coat_score = Lambda(CoatColor, Score, direction = "symmetric"),
fam_BCS = Lambda(Family, BCS, direction = "symmetric"),
fam_group = Lambda(Family, Treatment, direction = "symmetric"),
fam_leuk = Lambda(Family, MyeloidLeukemia, direction = "symmetric"),
fam_hard = Lambda(Family, HarderianTumor, direction = "symmetric"),
fam_lymph = Lambda(Family, PreTLymphoma, direction = "symmetric"),
fam_score = Lambda(Family, Score, direction = "symmetric"),
group_leuk = Lambda(Treatment, MyeloidLeukemia, direction = "symmetric"),
group_hard = Lambda(Treatment, HarderianTumor, direction = "symmetric"),
group_lymph = Lambda(Treatment, PreTLymphoma, direction = "symmetric"),
group_score = Lambda(Treatment, Score, direction = "symmetric"),
score_leuk = Lambda(Score, MyeloidLeukemia, direction = "symmetric"),
score_hard = Lambda(Score, HarderianTumor, direction = "symmetric"),
score_lymph = Lambda(Score, PreTLymphoma, direction = "symmetric"))
catcors <- as.data.frame(t(round(catcors, digits = 3)))
colnames(catcors) <- "Cor"
catcors
mcmc.model <- as.mcmc(model.fit)
summary(mcmc.model)
install.packages("tidybaes")
install.packages("tidybayes")
summary(mcmc.model)
class
class(summary(mcmc.model))
summary(mcmc.model)
attributes(summary(mcmc.model))
## assumption of normally distributed random effect
plot(ranef(final_mod), xlab = "qnorm", ylab = "Random Intercept for Family", main = "QQ-Plot of Random Effect")
## assumption of no over-dispersion
rp <- residuals(final_mod, type = "pearson")
sum(rp^2)/df.residual(final_mod)
ranef(mod)
class(ranef(mod))
reff <- as.data.frame(ranef(mod)$Family)
reff
as.data.frame(ranef(mod)$Family) %>% rename(re = `(Intercept)`)
## assumption of normally distributed random effect
reff <- as.data.frame(ranef(mod)$Family) %>% rename(re = `(Intercept)`)
ggplot(reff, aes(sample = re)) +
stat_qq() + stat_qq_line() +
labs(x = "qnorm", y = "random intercept")
## assumption of normally distributed random effect
reff <- as.data.frame(ranef(mod)$Family) %>% rename(re = `(Intercept)`)
ggplot(reff, aes(sample = re)) +
stat_qq() + stat_qq_line() +
theme_light() +
labs(x = "qnorm", y = "random intercept")
attributes(mcmc.model)
attributes(summary(mcmc.model))
summary(mcmc.model)$statistics
knitr::opts_chunk$set(fig.width=4, fig.height=3, fig.pos = 'H', fig.align = 'center',
echo=FALSE, warning=FALSE, message=FALSE)
# Plot of average score of sex-group-family
gr_score <- cats %>%
group_by(Treatment, Family) %>%
summarize(mean_score = mean(Cataracts))
l1 <- ggplot(gr_score, aes(x = Treatment, y = mean_score, color = Family)) +
geom_line(aes(group = Family)) +
scale_x_discrete(expand = c(0, .2)) +
theme_light() +
theme(legend.position="none") +
labs(y = "mean score")
l1
summary(mod)
mcmc.model <- as.mcmc(model.fit)
#summary(mcmc.model)
posts <- mcmc.model[[3]][,-7]
#posts <- exp(posts)/(1 + exp(posts))
phpds <- HPDinterval(posts)
posts <- data.frame(posts)
# Create table of posterior estimates
means <- apply(posts, 2, mean)
medians <- apply(posts, 2, median)
mode_fun <- function(x) {
ux <- round(unique(x), digits = 3)
return(ux[which.max(tabulate(match(x, ux)))])
}
modes <- apply(round(posts, 4), 2, mode_fun)
sds <- apply(posts, 2, sd)
glmm_probs <- exp(ests) / (1 + exp(ests))
p_var <- exp(var) / (1 + exp(var))
est_tab <- round(data.frame(c(ests, var), means, medians, modes, sds, phpds), digits = 3)
rownames(est_tab) <- c(paste("$\\beta_0$"), "$\\beta_1$", "$\\beta_2$", "$\\beta_3$", "$\\beta_4$", "$\\beta_5$", "$\\sigma^2$")
cats_emms
cats_emms <- emmeans(mod, ~ Treatment | Sex, infer = TRUE, type = "response")
emmip(cats_emms, Treatment ~ Sex) +
geom_text(aes(label = prob)) +
theme_light() + scale_color_startrek()
knitr::opts_chunk$set(fig.height=3, fig.pos = 'H', fig.align = 'center',
echo=FALSE, warning=FALSE, message=FALSE)
cats_emms <- emmeans(mod, ~ Treatment | Sex, infer = TRUE, type = "response")
emmip(cats_emms, Treatment ~ Sex) +
theme_light() + scale_color_startrek()
em1 <- emmeans(mod, ~ Treatment|Sex)
em1log <- regrid(em1, "log")
rrs1 <- contrast(em1log, interaction = "revpairwise", type = "response")
rrs1 <- as.data.frame(confint(rrs1)) %>%
rename(Contrast = Treatment_revpairwise, Lower = asymp.LCL, Upper = asymp.UCL)
rrplot1 <- ggplot(rrs1, aes(x = ratio, y = Contrast, xmin = Lower, xmax = Upper)) +
geom_errorbarh(aes(height = 0.2, color = Sex),
position = position_dodge(0.3), lwd = 1) +
geom_point(aes(color = Sex), position = position_dodge(0.3)) +
geom_text(aes(label = round(ratio, 2), color = Sex),
position = position_dodge(0.7)) +
theme_light() +
geom_vline(aes(xintercept = 1), color = "#84BD00FF", lty = 2) +
theme(axis.text.y = element_text(angle=50)) +
scale_color_startrek() +
labs(x = "Relative Risk",
title = "Within Sex, Across Treatment")
em2 <- emmeans(mod, ~ Sex|Treatment)
em2log <- regrid(em2, "log")
rrs2 <- contrast(em2log, interaction = "revpairwise", type = "response")
rrs2 <- as.data.frame(confint(rrs2)) %>%
rename(Contrast = Sex_revpairwise, Lower = asymp.LCL, Upper = asymp.UCL)
rrplot2 <- ggplot(rrs2, aes(x = ratio, y = Contrast, xmin = Lower, xmax = Upper)) +
geom_errorbarh(aes(height = 0.2, color = Treatment),
position = position_dodge(0.3), lwd = 1) +
geom_point(aes(color = Treatment), position = position_dodge(0.3)) +
geom_text(aes(label = round(ratio, 2), color = Treatment),
position = position_dodge(0.3), vjust = -1) +
theme_light() +
geom_vline(aes(xintercept = 1), color = "#FFCD00FF", lty = 2) +
scale_color_startrek() +
labs(x = "Relative Risk", title = "Within Treatment, across Sex")
par(mar = c(4, 4, .2, .2));
rrplot1
rrplot2
p_sigs <- est_tab[7,]
est <- as.numeric(p_sigs[1])
est <- exp(est) / (1 + exp(est))
psig <- as.numeric(p_sigs[4])
psig <- exp(psig) / (1 + exp(psig))
hpdl <- as.numeric(p_sigs[6])
hpdl <- exp(hpdl) / (1 + exp(hpdl))
hpdu <- as.numeric(p_sigs[7])
REs <- augment(ranef(mod,condVar = TRUE), ci.level = 0.95) %>%
select(c(level, estimate, lb, ub)) %>%
rename(Family = level) %>%
mutate(Prob = exp(estimate)/(1+exp(estimate)),
Lower = exp(lb)/(1+exp(lb)),
Upper = exp(ub)/(1+exp(ub)))
colors <- c("Family Effect" = "#5C88DAFF", "GLMM Est" = "#CC0C00FF", "Bayes Mode" = "#84BD00FF",
"HPD Interval" = "#FFCD00FF")
ggplot(REs, aes(x = Prob, y = Family, xmin = Lower, xmax = Upper)) +
geom_errorbarh(aes(height = 0, color = "Family Effect")) +
geom_point(aes(color = "Family Effect")) +
geom_vline(aes(xintercept = est, color = "GLMM Est"), lwd = 1, lty = 2) +
geom_vline(aes(xintercept = psig, color = "Bayes Mode"), lwd = 1, lty = 2) +
geom_vline(aes(xintercept = hpdl, color = "HPD Interval"), lwd = 1, lty = 4) +
geom_vline(aes(xintercept = hpdu, color = "HPD Interval"), lwd = 1, lty = 4) +
theme_light() +
scale_color_manual(values = colors) +
labs(color = "")
augment(ranef(mod,condVar = TRUE), ci.level = 0.95)
p_sigs <- est_tab[7,]
est <- as.numeric(p_sigs[1])
#est <- exp(est) / (1 + exp(est))
psig <- as.numeric(p_sigs[4])
#psig <- exp(psig) / (1 + exp(psig))
hpdl <- as.numeric(p_sigs[6])
#hpdl <- exp(hpdl) / (1 + exp(hpdl))
hpdu <- as.numeric(p_sigs[7])
#hpdu <- exp(hpdu) / (1 + exp(hpdu))
REs <- augment(ranef(mod,condVar = TRUE), ci.level = 0.95) %>%
select(c(level, estimate, lb, ub)) %>%
rename(Family = level) %>%
mutate(Prob = estimate,
Lower = lb,
Upper = ub)
colors <- c("Family Effect" = "#5C88DAFF", "GLMM Est" = "#CC0C00FF", "Bayes Mode" = "#84BD00FF",
"HPD Interval" = "#FFCD00FF")
ggplot(REs, aes(x = Prob, y = Family, xmin = Lower, xmax = Upper)) +
geom_errorbarh(aes(height = 0, color = "Family Effect")) +
geom_point(aes(color = "Family Effect")) +
geom_vline(aes(xintercept = est, color = "GLMM Est"), lwd = 1, lty = 2) +
geom_vline(aes(xintercept = psig, color = "Bayes Mode"), lwd = 1, lty = 2) +
geom_vline(aes(xintercept = hpdl, color = "HPD Interval"), lwd = 1, lty = 4) +
geom_vline(aes(xintercept = hpdu, color = "HPD Interval"), lwd = 1, lty = 4) +
theme_light() +
scale_color_manual(values = colors) +
labs(color = "")
p_sigs <- est_tab[7,]
est <- as.numeric(p_sigs[1])
est <- exp(est) / (1 + exp(est))
psig <- as.numeric(p_sigs[4])
psig <- exp(psig) / (1 + exp(psig))
hpdl <- as.numeric(p_sigs[6])
hpdl <- exp(hpdl) / (1 + exp(hpdl))
hpdu <- as.numeric(p_sigs[7])
hpdu <- exp(hpdu) / (1 + exp(hpdu))
REs <- augment(ranef(mod,condVar = TRUE), ci.level = 0.95) %>%
select(c(level, estimate, lb, ub)) %>%
rename(Family = level) %>%
mutate(Prob = exp(estimate)/(1+exp(estimate)),
Lower = exp(lb)/(1+exp(lb)),
Upper = exp(ub)/(1+exp(ub)))
colors <- c("Family Effect" = "#5C88DAFF", "GLMM Est" = "#CC0C00FF", "Bayes Mode" = "#84BD00FF",
"HPD Interval" = "#FFCD00FF")
ggplot(REs, aes(x = Prob, y = Family, xmin = Lower, xmax = Upper)) +
geom_errorbarh(aes(height = 0, color = "Family Effect")) +
geom_point(aes(color = "Family Effect")) +
geom_vline(aes(xintercept = est, color = "GLMM Est"), lwd = 1, lty = 2) +
geom_vline(aes(xintercept = psig, color = "Bayes Mode"), lwd = 1, lty = 2) +
geom_vline(aes(xintercept = hpdl, color = "HPD Interval"), lwd = 1, lty = 4) +
geom_vline(aes(xintercept = hpdu, color = "HPD Interval"), lwd = 1, lty = 4) +
theme_light() +
scale_color_manual(values = colors) +
labs(color = "")
rownames(est_tab) <- c("b_0", "b_1", "b_2", "b_3",
"b_4", "b_5", "sigma^2")
colnames(est_tab) <- c("GLMM Est", "MCMC Mean", "MCMC Median",
"MCMC Mode", "MCMC SD", "HPD Lower", "HPD Upper")
est_tab_show <- est_tab %>% select(-c(2:3))
xtable(est_tab_show, label = "tab:est_tab",
caption = "Final model parameter estimates on the log odds scale") %>%
xtable2kable(booktabs = T, include.rownames = TRUE,
table.placement = NULL) %>%
kable_styling(full_width = F, latex_options = "HOLD_position")
est_tab
hpdl
hpdu
c(hpdl, hpdu)
library(equatiomatic)
# mixed model binomial logistic regression
full_mod <- glmer(Cataracts ~ Treatment + Sex + Weight + CoatColor + BCS + HarderianTumor +
MyeloidLeukemia + PreTLymphoma + (1|Family), data = cats, family = binomial,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
knitr::opts_chunk$set(fig.height=2.8, fig.pos = 'H', fig.align = 'center',
echo=FALSE, warning=FALSE, message=FALSE)
library(equatiomatic)
# mixed model binomial logistic regression
full_mod <- glmer(Cataracts ~ Treatment + Sex + Weight + CoatColor + BCS + HarderianTumor +
MyeloidLeukemia + PreTLymphoma + (1|Family), data = cats, family = binomial,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
mcmc.model <- as.mcmc(model.fit)
#summary(mcmc.model)
posts <- mcmc.model[[3]][,-7]
#posts <- exp(posts)/(1 + exp(posts))
phpds <- HPDinterval(posts)
posts <- data.frame(posts)
# Create table of posterior estimates
means <- apply(posts, 2, mean)
medians <- apply(posts, 2, median)
mode_fun <- function(x) {
ux <- round(unique(x), digits = 3)
return(ux[which.max(tabulate(match(x, ux)))])
}
modes <- apply(round(posts, 4), 2, mode_fun)
sds <- apply(posts, 2, sd)
glmm_probs <- exp(ests) / (1 + exp(ests))
p_var <- exp(var) / (1 + exp(var))
est_tab <- round(data.frame(c(ests, var), means, medians, modes, sds, phpds), digits = 3)
