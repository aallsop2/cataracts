fam_BCS = Lambda(fam, BCS, direction = "symmetric"),
fam_age = Lambda(fam, age, direction = "symmetric"),
fam_groups = Lambda(fam, groups, direction = "symmetric"),
fam_leuk = Lambda(fam, myeloid_leuk, direction = "symmetric"),
fam_hard = Lambda(fam, harderian_tumor, direction = "symmetric"),
fam_lymph = Lambda(fam, preT_lymph, direction = "symmetric"),
fam_score = Lambda(fam, cataracts, direction = "symmetric"))
fcors
# BCS
bcors <- cats %>%
summarise(BCS_sex = Lambda(BCS, sex, direction = "symmetric"),
BCS_weight = Lambda(BCS, weight, direction = "symmetric"),
BCS_coat = Lambda(BCS, coat_color, direction = "symmetric"),
BCS_fam = Lambda(BCS, fam, direction = "symmetric"),
BCS_BCS = Lambda(BCS, BCS, direction = "symmetric"),
BCS_age = Lambda(BCS, age, direction = "symmetric"),
BCS_groups = Lambda(BCS, groups, direction = "symmetric"),
BCS_leuk = Lambda(BCS, myeloid_leuk, direction = "symmetric"),
BCS_hard = Lambda(BCS, harderian_tumor, direction = "symmetric"),
BCS_lymph = Lambda(BCS, preT_lymph, direction = "symmetric"),
BCS_score = Lambda(BCS, cataracts, direction = "symmetric"))
bcors
summary(aov(sex ~ weight, data = cats))
summary(aov(weight ~ sex, data = cats))
kruskal.test(weight ~ sex, data = cats)
# age
acors <- cats %>%
summarise(age_sex = Lambda(age, sex, direction = "symmetric"),
age_weight = Lambda(age, weight, direction = "symmetric"),
age_coat = Lambda(age, coat_color, direction = "symmetric"),
age_fam = Lambda(age, fam, direction = "symmetric"),
age_BCS = Lambda(age, BCS, direction = "symmetric"),
age_age = Lambda(age, age, direction = "symmetric"),
age_groups = Lambda(age, groups, direction = "symmetric"),
age_leuk = Lambda(age, myeloid_leuk, direction = "symmetric"),
age_hard = Lambda(age, harderian_tumor, direction = "symmetric"),
age_lymph = Lambda(age, preT_lymph, direction = "symmetric"),
age_score = Lambda(age, cataracts, direction = "symmetric"))
# sex
scors <- cats %>%
summarise(sex_sex = Lambda(sex, sex, direction = "symmetric"),
sex_weight = Lambda(sex, weight, direction = "symmetric"),
sex_coat = Lambda(sex, coat_color, direction = "symmetric"),
sex_fam = Lambda(sex, fam, direction = "symmetric"),
sex_BCS = Lambda(sex, BCS, direction = "symmetric"),
sex_age = Lambda(sex, age, direction = "symmetric"),
sex_group = Lambda(sex, groups, direction = "symmetric"),
sex_leuk = Lambda(sex, myeloid_leuk, direction = "symmetric"),
sex_hard = Lambda(sex, harderian_tumor, direction = "symmetric"),
sex_lymph = Lambda(sex, preT_lymph, direction = "symmetric"),
sex_score = Lambda(sex, cataracts, direction = "symmetric"))
#weight
wcors <- cats %>%
summarise(weight_sex = Lambda(weight, sex, direction = "symmetric"),
weight_weight = Lambda(weight, weight, direction = "symmetric"),
weight_coat = Lambda(weight, coat_color, direction = "symmetric"),
weight_fam = Lambda(weight, fam, direction = "symmetric"),
weight_BCS = Lambda(weight, BCS, direction = "symmetric"),
weight_age = Lambda(weight, age, direction = "symmetric"),
weight_group = Lambda(weight, groups, direction = "symmetric"),
weight_leuk = Lambda(weight, myeloid_leuk, direction = "symmetric"),
weight_hard = Lambda(weight, harderian_tumor, direction = "symmetric"),
weight_lymph = Lambda(weight, preT_lymph, direction = "symmetric"),
weight_score = Lambda(weight, cataracts, direction = "symmetric"))
#coat_color
ccors <- cats %>%
summarise(coat_sex = Lambda(coat_color, sex, direction = "symmetric"),
coat_weight = Lambda(coat_color, weight, direction = "symmetric"),
coat_coat = Lambda(coat_color, coat_color, direction = "symmetric"),
coat_fam = Lambda(coat_color, fam, direction = "symmetric"),
coat_BCS = Lambda(coat_color, BCS, direction = "symmetric"),
coat_age = Lambda(coat_color, age, direction = "symmetric"),
coat_group = Lambda(coat_color, groups, direction = "symmetric"),
coat_leuk = Lambda(coat_color, myeloid_leuk, direction = "symmetric"),
coat_hard = Lambda(coat_color, harderian_tumor, direction = "symmetric"),
coat_lymph = Lambda(coat_color, preT_lymph, direction = "symmetric"),
coat_score = Lambda(coat_color, cataracts, direction = "symmetric"))
# fam
fcors <- cats %>%
summarise(fam_sex = Lambda(fam, sex, direction = "symmetric"),
fam_weight = Lambda(fam, weight, direction = "symmetric"),
fam_coat = Lambda(fam, coat_color, direction = "symmetric"),
fam_fam = Lambda(fam, fam, direction = "symmetric"),
fam_BCS = Lambda(fam, BCS, direction = "symmetric"),
fam_age = Lambda(fam, age, direction = "symmetric"),
fam_group = Lambda(fam, groups, direction = "symmetric"),
fam_leuk = Lambda(fam, myeloid_leuk, direction = "symmetric"),
fam_hard = Lambda(fam, harderian_tumor, direction = "symmetric"),
fam_lymph = Lambda(fam, preT_lymph, direction = "symmetric"),
fam_score = Lambda(fam, cataracts, direction = "symmetric"))
# BCS
bcors <- cats %>%
summarise(BCS_sex = Lambda(BCS, sex, direction = "symmetric"),
BCS_weight = Lambda(BCS, weight, direction = "symmetric"),
BCS_coat = Lambda(BCS, coat_color, direction = "symmetric"),
BCS_fam = Lambda(BCS, fam, direction = "symmetric"),
BCS_BCS = Lambda(BCS, BCS, direction = "symmetric"),
BCS_age = Lambda(BCS, age, direction = "symmetric"),
BCS_group = Lambda(BCS, groups, direction = "symmetric"),
BCS_leuk = Lambda(BCS, myeloid_leuk, direction = "symmetric"),
BCS_hard = Lambda(BCS, harderian_tumor, direction = "symmetric"),
BCS_lymph = Lambda(BCS, preT_lymph, direction = "symmetric"),
BCS_score = Lambda(BCS, cataracts, direction = "symmetric"))
# age
acors <- cats %>%
summarise(age_sex = Lambda(age, sex, direction = "symmetric"),
age_weight = Lambda(age, weight, direction = "symmetric"),
age_coat = Lambda(age, coat_color, direction = "symmetric"),
age_fam = Lambda(age, fam, direction = "symmetric"),
age_BCS = Lambda(age, BCS, direction = "symmetric"),
age_age = Lambda(age, age, direction = "symmetric"),
age_group = Lambda(age, groups, direction = "symmetric"),
age_leuk = Lambda(age, myeloid_leuk, direction = "symmetric"),
age_hard = Lambda(age, harderian_tumor, direction = "symmetric"),
age_lymph = Lambda(age, preT_lymph, direction = "symmetric"),
age_score = Lambda(age, cataracts, direction = "symmetric"))
# groups
gcors <- cats %>%
summarise(group_sex = Lambda(BCS, sex, direction = "symmetric"),
group_weight = Lambda(BCS, weight, direction = "symmetric"),
group_coat = Lambda(BCS, coat_color, direction = "symmetric"),
group_fam = Lambda(BCS, fam, direction = "symmetric"),
group_BCS = Lambda(BCS, BCS, direction = "symmetric"),
group_age = Lambda(BCS, age, direction = "symmetric"),
group_group = Lambda(BCS, groups, direction = "symmetric"),
group_leuk = Lambda(BCS, myeloid_leuk, direction = "symmetric"),
group_hard = Lambda(BCS, harderian_tumor, direction = "symmetric"),
group_lymph = Lambda(BCS, preT_lymph, direction = "symmetric"),
group_score = Lambda(BCS, cataracts, direction = "symmetric"))
# select vars, add binary conversion for score
cats <- cats %>%
select(c(animal, sex, weight, coat_color, fam, BCS, age, groups,
myeloid_leuk, harderian_tumor, preT_lymph, cat_score)) %>%
%>% rename(irr_grp = groups) %>%
mutate(cataracts = ifelse(cat_score < 2, 0, 1))
# -- Read in the data
cats <- read_excel("GRSD.cataract.xlsx", sheet = "Sheet1")
#-- Load libraries
library(readxl)
library(tidyverse)
library(kableExtra)
library(DescTools)
library(ggsci)
library(lme4)
library(lmerTest)
library(broom.mixed)
library(influence.ME)
# -- Read in the data
cats <- read_excel("GRSD.cataract.xlsx", sheet = "Sheet1")
# remove spaces from column and value names
names(cats) <- str_replace_all(names(cats), " ", "_")
cats <- cats %>%
mutate(coat_color = str_replace_all(coat_color, " ", "_"))
str(cats)
# turn categorical vars into factor
cats <- cats %>%
rename(age = `age_(days)`) %>%
mutate(sex = as.factor(sex),
coat_color = as.factor(coat_color),
fam = as.factor(family), # should this stay a factor? Yes?
BCS = as.ordered(BCS),
group = as.factor(group),
groups = relevel(as.factor(groups), ref = "Unirradiated"),
myeloid_leuk = as.factor(Myeloid_Leukemia),
harderian_tumor = as.factor(Harderian_Tumor),
preT_lymph = as.factor(PreT_Lymphoma),
cat_score = as.ordered(Cataract_Score)) # ordinal cat; leave as numeric?
# select vars, add binary conversion for score
cats <- cats %>%
select(c(animal, sex, weight, coat_color, fam, BCS, age, groups,
myeloid_leuk, harderian_tumor, preT_lymph, cat_score)) %>%
%>% rename(treatment = groups) %>%
mutate(cataracts = ifelse(cat_score < 2, 0, 1))
# turn categorical vars into factor
cats <- cats %>%
rename(age = `age_(days)`) %>%
mutate(sex = as.factor(sex),
coat_color = as.factor(coat_color),
fam = as.factor(family), # should this stay a factor? Yes?
BCS = as.ordered(BCS),
group = as.factor(group),
groups = relevel(as.factor(groups), ref = "Unirradiated"),
myeloid_leuk = as.factor(Myeloid_Leukemia),
harderian_tumor = as.factor(Harderian_Tumor),
preT_lymph = as.factor(PreT_Lymphoma),
cat_score = as.ordered(Cataract_Score)) # ordinal cat; leave as numeric?
# -- Read in the data
cats <- read_excel("GRSD.cataract.xlsx", sheet = "Sheet1")
# remove spaces from column and value names
names(cats) <- str_replace_all(names(cats), " ", "_")
cats <- cats %>%
mutate(coat_color = str_replace_all(coat_color, " ", "_"))
str(cats)
# turn categorical vars into factor
cats <- cats %>%
rename(age = `age_(days)`) %>%
mutate(sex = as.factor(sex),
coat_color = as.factor(coat_color),
fam = as.factor(family), # should this stay a factor? Yes?
BCS = as.ordered(BCS),
group = as.factor(group),
groups = relevel(as.factor(groups), ref = "Unirradiated"),
myeloid_leuk = as.factor(Myeloid_Leukemia),
harderian_tumor = as.factor(Harderian_Tumor),
preT_lymph = as.factor(PreT_Lymphoma),
cat_score = as.ordered(Cataract_Score)) # ordinal cat; leave as numeric?
# select vars, add binary conversion for score
cats <- cats %>%
select(c(animal, sex, weight, coat_color, fam, BCS, age, groups,
myeloid_leuk, harderian_tumor, preT_lymph, cat_score)) %>%
%>% rename(treatment = groups) %>%
mutate(cataracts = ifelse(cat_score < 2, 0, 1))
# select vars, add binary conversion for score
cats <- cats %>%
select(c(animal, sex, weight, coat_color, fam, BCS, age, groups,
myeloid_leuk, harderian_tumor, preT_lymph, cat_score)) %>%
rename(treatment = groups) %>%
mutate(cataracts = ifelse(cat_score < 2, 0, 1))
str(cats)
# -- Read in the data
cats <- read_excel("GRSD.cataract.xlsx", sheet = "Sheet1")
# remove spaces from column and value names
names(cats) <- str_replace_all(names(cats), " ", "_")
cats <- cats %>%
mutate(coat_color = str_replace_all(coat_color, " ", "_"))
str(cats)
# turn categorical vars into factor
cats <- cats %>%
rename(age = `age_(days)`) %>%
mutate(sex = as.factor(sex),
coat_color = as.factor(coat_color),
family = as.factor(family), # should this stay a factor? Yes?
BCS = as.ordered(BCS),
group = as.factor(group),
groups = relevel(as.factor(groups), ref = "Unirradiated"),
myeloid_leuk = as.factor(Myeloid_Leukemia),
harderian_tumor = as.factor(Harderian_Tumor),
preT_lymph = as.factor(PreT_Lymphoma),
cat_score = as.ordered(Cataract_Score)) # ordinal cat; leave as numeric?
# select vars, add binary conversion for score
cats <- cats %>%
select(c(animal, sex, weight, coat_color, family, BCS, age, groups,
myeloid_leuk, harderian_tumor, preT_lymph, cat_score)) %>%
rename(treatment = groups) %>%
mutate(cataracts = ifelse(cat_score < 2, 0, 1))
str(cats)
# -- look for relationships between treatment group and other vars
# group and age
cats %>% group_by(treatment) %>% summarise(mean_age = mean(age),
median_age = median(age),
sd_age = sd(age))
# cancer covariates
cats %>% count(myeloid_leuk)
cats %>% count(harderian_tumor)
# counts of score by group
grs_ct <- cats %>% group_by(cat_score) %>%
count(treatment) %>%
pivot_wider(names_from = cat_score, values_from = n) %>%
group_by(treatment) %>%
mutate(total = sum(c(`1`, `2`, `3`, `4`))) %>%
kbl(caption = "Counts of Score by Treatment") %>%
add_header_above(c( " " = 1, "Cataract Score" = 4, " " = 1)) %>%
kable_classic(full_width = F, html_font = "Cambria", font_size = 14)
grs_ct
# turn categorical vars into factor
cats <- cats %>%
rename(Age = `age_(days)`,
Weight = weight,
Animal = animal) %>%
mutate(Sex = as.factor(sex),
CoatColor = as.factor(CoatColor),
Family = as.factor(family), # should this stay a factor? Yes?
BCS = as.ordered(BCS),
Treatment = relevel(as.factor(groups), ref = "Unirradiated"),
MyeloidLeukemia = as.factor(Myeloid_Leukemia),
HarderianTumor = as.factor(Harderian_Tumor),
PreTLymphoma = as.factor(PreT_Lymphoma),
Score = as.ordered(Cataract_Score)) # ordinal cat; leave as numeric?
# -- Read in the data
cats <- read_excel("GRSD.cataract.xlsx", sheet = "Sheet1")
# remove spaces from column and value names
names(cats) <- str_replace_all(names(cats), " ", "_")
cats <- cats %>%
mutate(CoatColor = str_replace_all(coat_color, " ", "_"))
str(cats)
# turn categorical vars into factor
cats <- cats %>%
rename(Age = `age_(days)`,
Weight = weight,
Animal = animal) %>%
mutate(Sex = as.factor(sex),
CoatColor = as.factor(CoatColor),
Family = as.factor(family), # should this stay a factor? Yes?
BCS = as.ordered(BCS),
Treatment = relevel(as.factor(groups), ref = "Unirradiated"),
MyeloidLeukemia = as.factor(Myeloid_Leukemia),
HarderianTumor = as.factor(Harderian_Tumor),
PreTLymphoma = as.factor(PreT_Lymphoma),
Score = as.ordered(Cataract_Score)) # ordinal cat; leave as numeric?
# select vars, add binary conversion for score
cats <- cats %>%
select(c(Animal, Sex, Weight, CoatColor, Family, BCS, Age, Treatment,
MyeloidLeukemia, HarderianTumor, PreTLymphoma, Score)) %>%
mutate(Cataracts = ifelse(cat_score < 2, 0, 1))
# select vars, add binary conversion for score
cats <- cats %>%
select(c(Animal, Sex, Weight, CoatColor, Family, BCS, Age, Treatment,
MyeloidLeukemia, HarderianTumor, PreTLymphoma, Score)) %>%
mutate(Cataracts = ifelse(Score < 2, 0, 1))
str(cats)
# counts of score by group
grs_ct <- cats %>% group_by(Score) %>%
count(Treatment) %>%
pivot_wider(names_from = Score, values_from = n) %>%
group_by(Treatment) %>%
mutate(total = sum(c(`1`, `2`, `3`, `4`))) %>%
kbl(caption = "Counts of Score by Treatment") %>%
add_header_above(c( " " = 1, "Cataract Score" = 4, " " = 1)) %>%
kable_classic(full_width = F, html_font = "Cambria", font_size = 14)
grs_ct
# Treatment
tcors <- cats %>%
summarise(group_sex = Lambda(Treatment, Sex, direction = "symmetric"),
group_weight = Lambda(Treatment, Weight, direction = "symmetric"),
group_coat = Lambda(Treatment, CoatColor, direction = "symmetric"),
group_fam = Lambda(Treatment, Family, direction = "symmetric"),
group_BCS = Lambda(Treatment, BCS, direction = "symmetric"),
group_age = Lambda(Treatment, Age, direction = "symmetric"),
group_group = Lambda(Treatment, Treatment, direction = "symmetric"),
group_leuk = Lambda(Treatment, MyeloidLeukemia, direction = "symmetric"),
group_hard = Lambda(Treatment, HarderianTumor, direction = "symmetric"),
group_lymph = Lambda(Treatment, PreTLymphoma, direction = "symmetric"),
group_score = Lambda(Treatment, Cataracts, direction = "symmetric"))
tcors
# Categorical Variable Correlations
catcors <- cats %>%
summarise(sex_coat = Lambda(Sex, CoatColor, direction = "symmetric"),
sex_fam = Lambda(Sex, Family, direction = "symmetric"),
sex_BCS = Lambda(Sex, BCS, direction = "symmetric"),
sex_group = Lambda(Sex, Treatment, direction = "symmetric"),
sex_leuk = Lambda(Sex, MyeloidLeukemia, direction = "symmetric"),
sex_hard = Lambda(Sex, HarderianTumor, direction = "symmetric"),
sex_lymph = Lambda(Sex, PreTLymphoma, direction = "symmetric"),
sex_score = Lambda(Sex, Score, direction = "symmetric"),
coat_fam = Lambda(CoatColor, Family, direction = "symmetric"),
coat_BCS = Lambda(CoatColor, BCS, direction = "symmetric"),
coat_group = Lambda(CoatColor, Treatment, direction = "symmetric"),
coat_leuk = Lambda(CoatColor, MyeloidLeukemia, direction = "symmetric"),
coat_hard = Lambda(CoatColor, HarderianTumor, direction = "symmetric"),
coat_lymph = Lambda(CoatColor, PreTLymphoma, direction = "symmetric"),
coat_score = Lambda(CoatColor, Score, direction = "symmetric"),
fam_BCS = Lambda(Family, BCS, direction = "symmetric"),
fam_group = Lambda(Family, Treatment, direction = "symmetric"),
fam_leuk = Lambda(Family, MyeloidLeukemia, direction = "symmetric"),
fam_hard = Lambda(Family, HarderianTumor, direction = "symmetric"),
fam_lymph = Lambda(Family, PreTLymphoma, direction = "symmetric"),
fam_score = Lambda(Family, Score, direction = "symmetric"),
group_leuk = Lambda(Treatment, MyeloidLeukemia, direction = "symmetric"),
group_hard = Lambda(Treatment, HarderianTumor, direction = "symmetric"),
group_lymph = Lambda(Treatment, PreTLymphoma, direction = "symmetric"),
group_score = Lambda(Treatment, Score, direction = "symmetric"),
score_leuk = Lambda(Score, MyeloidLeukemia, direction = "symmetric"),
score_hard = Lambda(Score, HarderianTumor, direction = "symmetric"),
score_lymph = Lambda(Score, PreTLymphoma, direction = "symmetric"))
catcors <- catcors %>%
rownames_to_column()
catcors <- catcors %>%
rownames_to_column(var = "Cor")
# Categorical Variable Correlations
catcors <- cats %>%
summarise(sex_coat = Lambda(Sex, CoatColor, direction = "symmetric"),
sex_fam = Lambda(Sex, Family, direction = "symmetric"),
sex_BCS = Lambda(Sex, BCS, direction = "symmetric"),
sex_group = Lambda(Sex, Treatment, direction = "symmetric"),
sex_leuk = Lambda(Sex, MyeloidLeukemia, direction = "symmetric"),
sex_hard = Lambda(Sex, HarderianTumor, direction = "symmetric"),
sex_lymph = Lambda(Sex, PreTLymphoma, direction = "symmetric"),
sex_score = Lambda(Sex, Score, direction = "symmetric"),
coat_fam = Lambda(CoatColor, Family, direction = "symmetric"),
coat_BCS = Lambda(CoatColor, BCS, direction = "symmetric"),
coat_group = Lambda(CoatColor, Treatment, direction = "symmetric"),
coat_leuk = Lambda(CoatColor, MyeloidLeukemia, direction = "symmetric"),
coat_hard = Lambda(CoatColor, HarderianTumor, direction = "symmetric"),
coat_lymph = Lambda(CoatColor, PreTLymphoma, direction = "symmetric"),
coat_score = Lambda(CoatColor, Score, direction = "symmetric"),
fam_BCS = Lambda(Family, BCS, direction = "symmetric"),
fam_group = Lambda(Family, Treatment, direction = "symmetric"),
fam_leuk = Lambda(Family, MyeloidLeukemia, direction = "symmetric"),
fam_hard = Lambda(Family, HarderianTumor, direction = "symmetric"),
fam_lymph = Lambda(Family, PreTLymphoma, direction = "symmetric"),
fam_score = Lambda(Family, Score, direction = "symmetric"),
group_leuk = Lambda(Treatment, MyeloidLeukemia, direction = "symmetric"),
group_hard = Lambda(Treatment, HarderianTumor, direction = "symmetric"),
group_lymph = Lambda(Treatment, PreTLymphoma, direction = "symmetric"),
group_score = Lambda(Treatment, Score, direction = "symmetric"),
score_leuk = Lambda(Score, MyeloidLeukemia, direction = "symmetric"),
score_hard = Lambda(Score, HarderianTumor, direction = "symmetric"),
score_lymph = Lambda(Score, PreTLymphoma, direction = "symmetric"))
catcors <- catcors %>%
rownames_to_column(var = "Cor") %>%
pivot_longer(cols = -Cor, names_to = "Cor")
catcors <- t(catcors)
catcors <- as.data.frame(t(catcors))
# Categorical Variable Correlations
catcors <- cats %>%
summarise(sex_coat = Lambda(Sex, CoatColor, direction = "symmetric"),
sex_fam = Lambda(Sex, Family, direction = "symmetric"),
sex_BCS = Lambda(Sex, BCS, direction = "symmetric"),
sex_group = Lambda(Sex, Treatment, direction = "symmetric"),
sex_leuk = Lambda(Sex, MyeloidLeukemia, direction = "symmetric"),
sex_hard = Lambda(Sex, HarderianTumor, direction = "symmetric"),
sex_lymph = Lambda(Sex, PreTLymphoma, direction = "symmetric"),
sex_score = Lambda(Sex, Score, direction = "symmetric"),
coat_fam = Lambda(CoatColor, Family, direction = "symmetric"),
coat_BCS = Lambda(CoatColor, BCS, direction = "symmetric"),
coat_group = Lambda(CoatColor, Treatment, direction = "symmetric"),
coat_leuk = Lambda(CoatColor, MyeloidLeukemia, direction = "symmetric"),
coat_hard = Lambda(CoatColor, HarderianTumor, direction = "symmetric"),
coat_lymph = Lambda(CoatColor, PreTLymphoma, direction = "symmetric"),
coat_score = Lambda(CoatColor, Score, direction = "symmetric"),
fam_BCS = Lambda(Family, BCS, direction = "symmetric"),
fam_group = Lambda(Family, Treatment, direction = "symmetric"),
fam_leuk = Lambda(Family, MyeloidLeukemia, direction = "symmetric"),
fam_hard = Lambda(Family, HarderianTumor, direction = "symmetric"),
fam_lymph = Lambda(Family, PreTLymphoma, direction = "symmetric"),
fam_score = Lambda(Family, Score, direction = "symmetric"),
group_leuk = Lambda(Treatment, MyeloidLeukemia, direction = "symmetric"),
group_hard = Lambda(Treatment, HarderianTumor, direction = "symmetric"),
group_lymph = Lambda(Treatment, PreTLymphoma, direction = "symmetric"),
group_score = Lambda(Treatment, Score, direction = "symmetric"),
score_leuk = Lambda(Score, MyeloidLeukemia, direction = "symmetric"),
score_hard = Lambda(Score, HarderianTumor, direction = "symmetric"),
score_lymph = Lambda(Score, PreTLymphoma, direction = "symmetric"))
catcors <- as.data.frame(t(catcors))
catcors
# Categorical Variable Correlations
catcors <- cats %>%
summarise(sex_coat = Lambda(Sex, CoatColor, direction = "symmetric"),
sex_fam = Lambda(Sex, Family, direction = "symmetric"),
sex_BCS = Lambda(Sex, BCS, direction = "symmetric"),
sex_group = Lambda(Sex, Treatment, direction = "symmetric"),
sex_leuk = Lambda(Sex, MyeloidLeukemia, direction = "symmetric"),
sex_hard = Lambda(Sex, HarderianTumor, direction = "symmetric"),
sex_lymph = Lambda(Sex, PreTLymphoma, direction = "symmetric"),
sex_score = Lambda(Sex, Score, direction = "symmetric"),
coat_fam = Lambda(CoatColor, Family, direction = "symmetric"),
coat_BCS = Lambda(CoatColor, BCS, direction = "symmetric"),
coat_group = Lambda(CoatColor, Treatment, direction = "symmetric"),
coat_leuk = Lambda(CoatColor, MyeloidLeukemia, direction = "symmetric"),
coat_hard = Lambda(CoatColor, HarderianTumor, direction = "symmetric"),
coat_lymph = Lambda(CoatColor, PreTLymphoma, direction = "symmetric"),
coat_score = Lambda(CoatColor, Score, direction = "symmetric"),
fam_BCS = Lambda(Family, BCS, direction = "symmetric"),
fam_group = Lambda(Family, Treatment, direction = "symmetric"),
fam_leuk = Lambda(Family, MyeloidLeukemia, direction = "symmetric"),
fam_hard = Lambda(Family, HarderianTumor, direction = "symmetric"),
fam_lymph = Lambda(Family, PreTLymphoma, direction = "symmetric"),
fam_score = Lambda(Family, Score, direction = "symmetric"),
group_leuk = Lambda(Treatment, MyeloidLeukemia, direction = "symmetric"),
group_hard = Lambda(Treatment, HarderianTumor, direction = "symmetric"),
group_lymph = Lambda(Treatment, PreTLymphoma, direction = "symmetric"),
group_score = Lambda(Treatment, Score, direction = "symmetric"),
score_leuk = Lambda(Score, MyeloidLeukemia, direction = "symmetric"),
score_hard = Lambda(Score, HarderianTumor, direction = "symmetric"),
score_lymph = Lambda(Score, PreTLymphoma, direction = "symmetric"))
catcors <- as.data.frame(t(round(catcors, digits = 3)))
catcors
colnames(catcors) <- "Cor"
catcors
# Numeric Variable Correlations
cor(cats$Weight, cats$Age)
cor(cats$Weight, cats$BCS)
cor(cats$Age, cats$Cataracts)
# Categorical v. Numeric Variable Correlations
summary(aov(Weight ~ Sex, data = cats))
kruskal.test(Weight ~ Sex, data = cats)
summary(aov(Weight ~ CoatColor, data = cats))
kruskal.test(Weight ~ CoatColor, data = cats)
kruskal.test(Weight ~ Family, data = cats)
summary(aov(Weight ~ Family, data = cats))
kruskal.test(Weight ~ Treatment, data = cats)
summary(aov(Weight ~ Treatment, data = cats))
kruskal.test(Weight ~ PreTLymphoma, data = cats)
summary(aov(Weight ~ CoatColor, data = cats))
# Weight
# adjust p-values by total number of comparisons
summary(aov(Weight ~ Sex, data = cats))
kruskal.test(Weight ~ Sex, data = cats)
summary(aov(Weight ~ CoatColor, data = cats))
kruskal.test(Weight ~ CoatColor, data = cats)
summary(aov(Weight ~ Family, data = cats))
kruskal.test(Weight ~ Family, data = cats)
summary(aov(Weight ~ BCS, data = cats))
kruskal.test(Weight ~ BCS, data = cats)
.05/8
# Age
summary(aov(Age ~ Sex, data = cats))
kruskal.test(Age ~ Sex, data = cats)
summary(aov(Age ~ CoatColor, data = cats))
kruskal.test(Age ~ CoatColor, data = cats)
summary(aov(Age ~ Family, data = cats))
kruskal.test(Age ~ Family, data = cats)
summary(aov(Age ~ BCS, data = cats))
kruskal.test(Age ~ BCS, data = cats)
summary(aov(Age ~ Treatment, data = cats))
kruskal.test(Age ~ Treatment, data = cats)
summary(aov(Age ~ MyeloidLeukemia, data = cats))
kruskal.test(Age ~ MyeloidLeukemia, data = cats)
summary(aov(Age ~ HarderianTumor, data = cats))
kruskal.test(Age ~ HarderianTumor, data = cats)
summary(aov(Age ~ PreTLymphoma, data = cats))
kruskal.test(Age ~ PreTLymphoma, data = cats)
